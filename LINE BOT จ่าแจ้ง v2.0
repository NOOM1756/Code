// ====================================================================
// LINE BOT จ่าแจ้ง - ระบบจัดการข้อมูลทหาร (ปรับปรุงแล้ว)
// ปรับปรุงเพิ่มเติม: Performance, Security, Features, Error Handling
// ====================================================================

const CHANNEL_ACCESS_TOKEN = 'eCaIGNhvRTfGaVBxW9pAp2P5WSK7QGoB7/xePOUoJrgYoggex9Iz7nGqjpevJC/281jaC9xW4SFq75b+5CEvVsl/07NXXecUYG/tGeVvEuj0yPp0Np00wRTNU/OVYoQCH/ib4lFqvAt8pp6tqJOBxAdB04t89/1O/w1cDnyilFU=';
const MAX_MESSAGE_LENGTH = 5000; // จำกัดความยาวข้อความ
const MAX_SEARCH_RESULTS = 10; // จำกัดผลลัพธ์การค้นหา

// Cache สำหรับเก็บข้อมูลที่ใช้บ่อย
const CACHE = {
  loginData: null,
  adminData: null,
  lastCacheUpdate: null,
  CACHE_DURATION: 5 * 60 * 1000 // 5 นาที
};

/**
 * ฟังก์ชันหลักสำหรับจัดการข้อความจาก LINE
 */
function doPost(e) {
  try {
    const event = JSON.parse(e.postData.contents).events[0];
    
    // ตรวจสอบประเภท event
    if (event.type !== 'message' || event.message.type !== 'text') {
      return;
    }
    
    const userId = event.source.userId;
    const text = event.message.text.trim();
    
    // Log การใช้งาน
    logUserActivity(userId, text);
    
    // Route คำสั่งต่าง ๆ
    routeCommand(userId, text, event);
    
  } catch (error) {
    Logger.log(`Error in doPost: ${error.message}`);
    // ส่งข้อความแจ้งเตือนข้อผิดพลาดให้ admin
    notifyAdminError(error);
  }
}

/**
 * Route คำสั่งไปยังฟังก์ชันที่เหมาะสม
 */
function routeCommand(userId, text, event) {
  const commands = {
    // Authentication
    'ลงทะเบียน': () => handleRegistration(userId, text),
    
    // Personal Info
    '/ข้อมูลบุตรของฉัน': () => handleCommandChildInfo(event),
    '/ข้อมูลกำลังพลของฉัน': () => handleCommandPersonnelInfo(event),
    '/โปรไฟล์': () => handleUserProfile(event), // ใหม่
    
    // Duty System
    '/เวรของฉัน': () => handleCommandDutyToday(event),
    '/เวรประจำเดือน': () => handleMonthlyDuty(event),
    '/เวรย้อนหลัง': () => handlePastDuties(event),
    '/เวรต่อไป': () => handleUpcomingDuties(event), // ใหม่
    
    // Personnel Management (Admin)
    '/เพิ่มกำลังพล': () => handleAddPersonnel(userId, text),
    '/แก้ไขกำลังพล': () => handleEditPersonnel(userId, text),
    '/ลบกำลังพล': () => handleDeletePersonnel(userId, text),
    '/ดูข้อมูลกำลังพลทั้งหมด': () => handleViewAllPersonnel(event),
    '/ค้นหากำลังพล': () => handleSearchPersonnel(userId, text), // ใหม่
    
    // Children Management
    '/เพิ่มบุตร': () => handleAddChild(userId, text),
    '/แก้ไขบุตร': () => handleEditChild(userId, text),
    '/ลบบุตร': () => handleDeleteChild(userId, text),
    '/ดูข้อมูลบุตรทั้งหมด': () => handleViewAllChildren(event),
    
    // Duty Management (Admin)
    '/เพิ่มเวร': () => handleAddDuty(userId, text),
    '/แก้ไขเวร': () => handleEditDuty(userId, text),
    '/ลบเวร': () => handleDeleteDuty(userId, text),
    '/ดูข้อมูลเวรทั้งหมด': () => handleViewAllDuties(event),
    '/สร้างตารางเวร': () => handleCreateDutySchedule(userId, text), // ใหม่
    
    // Command Book Management
    '/เพิ่มหนังสือคำสั่ง': () => handleAddCommand(userId, text),
    '/แก้ไขหนังสือคำสั่ง': () => handleEditCommand(userId, text),
    '/ลบหนังสือคำสั่ง': () => handleDeleteCommand(userId, text),
    '/ค้นหาหนังสือคำสั่ง': () => handleSearchCommand(userId, text),
    
    // Reports
    '/บุตรทั้งหมดของกองร้อย': () => handleCompanyChildrenReport(event),
    '/สรุปรายงาน': () => handleGenerateReport(event),
    '/รายงานเวรประจำเดือน': () => handleMonthlyDutyReport(event), // ใหม่
    '/สถิติการใช้งาน': () => handleUsageStatistics(event), // ใหม่
    
    // Notifications
    '/ตั้งค่าการแจ้งเตือน': () => handleNotificationSettings(userId, text), // ใหม่
    '/ทดสอบการแจ้งเตือน': () => handleTestNotification(userId), // ใหม่
    
    // System
    '/สถานะระบบ': () => handleSystemStatus(userId), // ใหม่
    '/ข้อมูลเวอร์ชัน': () => handleVersionInfo(userId), // ใหม่
    '/ช่วยเหลือ': () => sendReply(userId, getHelpMessage()),
    '/help': () => sendReply(userId, getHelpMessage())
  };
  
  // ค้นหาคำสั่งที่ตรงกัน
  for (const [command, handler] of Object.entries(commands)) {
    if (text.startsWith(command)) {
      handler();
      return;
    }
  }
  
  // ถ้าไม่พบคำสั่ง ให้แสดงข้อความช่วยเหลือ
  sendReply(userId, getSmartHelpMessage(text));
}

/**
 * ระบบ Cache สำหรับปรับปรุงประสิทธิภาพ
 */
function getCachedData(type) {
  const now = new Date().getTime();
  
  if (CACHE.lastCacheUpdate && (now - CACHE.lastCacheUpdate) < CACHE.CACHE_DURATION) {
    return CACHE[type];
  }
  
  // รีเฟรช Cache
  refreshCache();
  return CACHE[type];
}

function refreshCache() {
  try {
    const loginSheet = SpreadsheetApp.getActive().getSheetByName('LOGIN');
    const adminSheet = SpreadsheetApp.getActive().getSheetByName('ADMIN');
    
    CACHE.loginData = loginSheet ? loginSheet.getDataRange().getValues() : [];
    CACHE.adminData = adminSheet ? adminSheet.getDataRange().getValues() : [];
    CACHE.lastCacheUpdate = new Date().getTime();
    
    Logger.log('Cache refreshed successfully');
  } catch (error) {
    Logger.log(`Error refreshing cache: ${error.message}`);
  }
}

/**
 * ปรับปรุงฟังก์ชันตรวจสอบ Admin ด้วย Cache
 */
function checkAdminPermission(userId) {
  try {
    const adminData = getCachedData('adminData');
    if (!adminData || adminData.length <= 1) return false;
    
    const adminUserIds = adminData.slice(1).map(row => String(row[0]).trim());
    return adminUserIds.includes(String(userId).trim());
  } catch (e) {
    Logger.log(`Error checking admin permission: ${e.message}`);
    return false;
  }
}

/**
 * ปรับปรุงฟังก์ชันดึง Military ID ด้วย Cache
 */
function getUserMilitaryId(userId) {
  try {
    const loginData = getCachedData('loginData');
    if (!loginData) return null;
    
    for (let i = 1; i < loginData.length; i++) {
      if (loginData[i][0] === userId) {
        return loginData[i][1];
      }
    }
    return null;
  } catch (error) {
    Logger.log(`Error getting military ID: ${error.message}`);
    return null;
  }
}

/**
 * ฟังก์ชันใหม่: แสดงโปรไฟล์ผู้ใช้
 */
function handleUserProfile(e) {
  const userId = e.source.userId;
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');
  
  try {
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    const childSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลบุตร-ธิดา');
    
    const pData = personnelSheet.getDataRange().getValues();
    const cData = childSheet.getDataRange().getValues();
    
    let personnelInfo = null;
    let childrenCount = 0;
    
    // หาข้อมูลกำลังพล
    for (let i = 1; i < pData.length; i++) {
      if (String(pData[i][5]).trim() === String(militaryId).trim()) {
        personnelInfo = pData[i];
        break;
      }
    }
    
    // นับจำนวนบุตร
    for (let i = 1; i < cData.length; i++) {
      if (String(cData[i][0]).trim() === String(militaryId).trim()) {
        childrenCount++;
      }
    }
    
    if (!personnelInfo) {
      return sendReply(userId, '❌ ไม่พบข้อมูลกำลังพล');
    }
    
    const profileFlex = createProfileFlexMessage(personnelInfo, childrenCount);
    sendFlex(userId, profileFlex);
    
  } catch (error) {
    Logger.log(`Error in handleUserProfile: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงข้อมูลโปรไฟล์');
  }
}

/**
 * ฟังก์ชันใหม่: ดูเวรที่กำลังจะมาถึง
 */
function handleUpcomingDuties(e) {
  const userId = e.source.userId;
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');
  
  try {
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('เวร - ยาม');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    
    // หาชื่อจากเลขทหาร
    const name = getPersonnelName(militaryId);
    if (!name) return sendReply(userId, '❌ ไม่พบข้อมูลชื่อกำลังพล');
    
    const today = new Date();
    const upcomingDuties = [];
    
    const dData = dutySheet.getDataRange().getValues();
    
    dData.slice(1).forEach(row => {
      if (row[2] === name) {
        const dutyDate = parseDateFromSheet(row[0]);
        if (dutyDate && dutyDate > today) {
          upcomingDuties.push({
            date: Utilities.formatDate(dutyDate, 'Asia/Bangkok', 'dd/MM/yyyy'),
            duty: row[4] || 'ไม่ระบุ',
            company: row[5] || 'ไม่ระบุ',
            sortDate: dutyDate
          });
        }
      }
    });
    
    upcomingDuties.sort((a, b) => a.sortDate - b.sortDate);
    
    if (upcomingDuties.length === 0) {
      return sendReply(userId, '📅 ไม่มีเวรที่กำลังจะมาถึง');
    }
    
    const flex = createUpcomingDutiesFlexMessage(name, upcomingDuties.slice(0, 5));
    sendFlex(userId, flex);
    
  } catch (error) {
    Logger.log(`Error in handleUpcomingDuties: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงข้อมูลเวร');
  }
}

/**
 * ฟังก์ชันใหม่: ค้นหากำลังพล
 */
function handleSearchPersonnel(userId, text) {
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์ค้นหาข้อมูลกำลังพล');
  }
  
  const keyword = text.replace('/ค้นหากำลังพล ', '').trim().toLowerCase();
  if (!keyword) {
    return sendReply(userId, '❗ โปรดระบุคีย์เวิร์ดสำหรับค้นหา\nตัวอย่าง: /ค้นหากำลังพล สมชาย');
  }
  
  try {
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    const data = personnelSheet.getDataRange().getValues().slice(1);
    
    const results = data.filter(row => 
      `${row[1]} ${row[2]} ${row[3]} ${row[5]}`.toLowerCase().includes(keyword)
    );
    
    if (results.length === 0) {
      return sendReply(userId, `❌ ไม่พบกำลังพลที่ตรงกับ "${keyword}"`);
    }
    
    let message = `🔍 พบกำลังพล ${results.length} คน สำหรับ "${keyword}"\n\n`;
    results.slice(0, MAX_SEARCH_RESULTS).forEach((person, index) => {
      message += `${index + 1}. ${person[1]} ${person[2]} ${person[3]}\n`;
      message += `   🆔 ${person[5]} | ${person[0]} | ${person[7]}\n\n`;
    });
    
    if (results.length > MAX_SEARCH_RESULTS) {
      message += `...และอีก ${results.length - MAX_SEARCH_RESULTS} คน`;
    }
    
    sendReply(userId, message);
    
  } catch (error) {
    Logger.log(`Error in handleSearchPersonnel: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการค้นหา');
  }
}

/**
 * ฟังก์ชันใหม่: สร้างตารางเวร
 */
function handleCreateDutySchedule(userId, text) {
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์สร้างตารางเวร');
  }
  
  const parts = text.replace('/สร้างตารางเวร ', '').split('|');
  if (parts.length !== 3) {
    return sendReply(userId, `❗ รูปแบบ: /สร้างตารางเวร <วันเริ่ม(DD/MM/YYYY)>|<วันสิ้นสุด(DD/MM/YYYY)>|<รายชื่อ(คั่นด้วย,)>
    
ตัวอย่าง: /สร้างตารางเวร 01/08/2568|31/08/2568|สมชาย,สมหญิง,สมศรี`);
  }
  
  try {
    const [startDateStr, endDateStr, namesStr] = parts.map(p => p.trim());
    const startDate = parseThaiDateToDateObject(startDateStr);
    const endDate = parseThaiDateToDateObject(endDateStr);
    const names = namesStr.split(',').map(n => n.trim());
    
    if (!startDate || !endDate) {
      return sendReply(userId, '❗ รูปแบบวันที่ไม่ถูกต้อง');
    }
    
    if (names.length === 0) {
      return sendReply(userId, '❗ กรุณาระบุรายชื่อ');
    }
    
    const schedule = generateDutySchedule(startDate, endDate, names);
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('เวร - ยาม');
    
    schedule.forEach(duty => {
      dutySheet.appendRow([duty.date, duty.rank, duty.firstName, duty.lastName, duty.position, duty.company, duty.phone]);
    });
    
    sendReply(userId, `✅ สร้างตารางเวรสำเร็จ ${schedule.length} รายการ`);
    
  } catch (error) {
    Logger.log(`Error in handleCreateDutySchedule: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการสร้างตารางเวร');
  }
}

/**
 * ฟังก์ชันใหม่: รายงานเวรประจำเดือน
 */
function handleMonthlyDutyReport(e) {
  const userId = e.source.userId;
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์ดูรายงานนี้');
  }
  
  try {
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('เวร - ยาม');
    const data = dutySheet.getDataRange().getValues().slice(1);
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const monthlyDuties = data.filter(row => {
      const dutyDate = parseDateFromSheet(row[0]);
      return dutyDate && dutyDate.getMonth() + 1 === currentMonth && dutyDate.getFullYear() === currentYear;
    });
    
    // สรุปสถิติ
    const dutyStats = {};
    monthlyDuties.forEach(duty => {
      const name = `${duty[2]} ${duty[3]}`;
      dutyStats[name] = (dutyStats[name] || 0) + 1;
    });
    
    let report = `📊 รายงานเวรประจำเดือน ${currentMonth}/${currentYear}\n\n`;
    report += `📋 จำนวนเวรทั้งหมด: ${monthlyDuties.length} รายการ\n\n`;
    report += `👥 สถิติการเวรตามบุคคล:\n`;
    
    Object.entries(dutyStats)
      .sort((a, b) => b[1] - a[1])
      .forEach(([name, count], index) => {
        report += `${index + 1}. ${name}: ${count} ครั้ง\n`;
      });
    
    sendReply(userId, report);
    
  } catch (error) {
    Logger.log(`Error in handleMonthlyDutyReport: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการสร้างรายงาน');
  }
}

/**
 * ฟังก์ชันใหม่: สถิติการใช้งาน
 */
function handleUsageStatistics(e) {
  const userId = e.source.userId;
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์ดูสถิติการใช้งาน');
  }
  
  try {
    const activitySheet = SpreadsheetApp.getActive().getSheetByName('กิจกรรมการใช้งาน');
    if (!activitySheet) {
      return sendReply(userId, '❌ ไม่พบข้อมูลกิจกรรมการใช้งาน');
    }
    
    const data = activitySheet.getDataRange().getValues().slice(1);
    const today = new Date().toDateString();
    
    const todayActivities = data.filter(row => new Date(row[1]).toDateString() === today);
    const totalUsers = new Set(data.map(row => row[0])).size;
    const activeToday = new Set(todayActivities.map(row => row[0])).size;
    
    // นับคำสั่งที่ใช้บ่อย
    const commandStats = {};
    data.forEach(row => {
      const command = row[2].split(' ')[0];
      commandStats[command] = (commandStats[command] || 0) + 1;
    });
    
    let report = `📈 สถิติการใช้งานระบบ\n\n`;
    report += `👥 ผู้ใช้ทั้งหมด: ${totalUsers} คน\n`;
    report += `🟢 ผู้ใช้วันนี้: ${activeToday} คน\n`;
    report += `📊 กิจกรรมวันนี้: ${todayActivities.length} ครั้ง\n\n`;
    report += `🔥 คำสั่งยอดนิยม:\n`;
    
    Object.entries(commandStats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .forEach(([command, count], index) => {
        report += `${index + 1}. ${command}: ${count} ครั้ง\n`;
      });
    
    sendReply(userId, report);
    
  } catch (error) {
    Logger.log(`Error in handleUsageStatistics: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงสถิติ');
  }
}

/**
 * ฟังก์ชันใหม่: ตั้งค่าการแจ้งเตือน
 */
function handleNotificationSettings(userId, text) {
  const parts = text.replace('/ตั้งค่าการแจ้งเตือน ', '').split('|');
  if (parts.length !== 2) {
    return sendReply(userId, `❗ รูปแบบ: /ตั้งค่าการแจ้งเตือน <ประเภท>|<เปิด/ปิด>
    
ประเภทการแจ้งเตือน:
- เวรยาม: แจ้งเตือนเวรประจำวัน
- บุตร: แจ้งเตือนเกี่ยวกับข้อมูลบุตร
- คำสั่ง: แจ้งเตือนหนังสือคำสั่งใหม่

ตัวอย่าง: /ตั้งค่าการแจ้งเตือน เวรยาม|เปิด`);
  }
  
  try {
    const [type, setting] = parts.map(p => p.trim());
    const settingsSheet = getOrCreateSheet('การตั้งค่าการแจ้งเตือน');
    
    const validTypes = ['เวรยาม', 'บุตร', 'คำสั่ง'];
    const validSettings = ['เปิด', 'ปิด'];
    
    if (!validTypes.includes(type) || !validSettings.includes(setting)) {
      return sendReply(userId, '❗ ประเภทหรือการตั้งค่าไม่ถูกต้อง');
    }
    
    // บันทึกการตั้งค่า
    const data = settingsSheet.getDataRange().getValues();
    let found = false;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === userId && data[i][1] === type) {
        settingsSheet.getRange(i + 1, 3).setValue(setting);
        found = true;
        break;
      }
    }
    
    if (!found) {
      settingsSheet.appendRow([userId, type, setting, new Date()]);
    }
    
    sendReply(userId, `✅ ตั้งค่าการแจ้งเตือน "${type}" เป็น "${setting}" เรียบร้อยแล้ว`);
    
  } catch (error) {
    Logger.log(`Error in handleNotificationSettings: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการตั้งค่า');
  }
}

/**
 * ฟังก์ชันใหม่: สถานะระบบ
 */
function handleSystemStatus(userId) {
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์ดูสถานะระบบ');
  }
  
  try {
    const sheets = ['ข้อมูลกำลังพล', 'ข้อมูลบุตร-ธิดา', 'เวร - ยาม', 'คำสั่งต่างๆ', 'LOGIN', 'ADMIN'];
    let status = '🖥️ สถานะระบบ\n\n';
    
    sheets.forEach(sheetName => {
      const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
      if (sheet) {
        const rows = sheet.getLastRow() - 1; // ไม่นับ header
        status += `✅ ${sheetName}: ${rows} รายการ\n`;
      } else {
        status += `❌ ${sheetName}: ไม่พบชีท\n`;
      }
    });
    
    status += `\n⏰ เวลาตรวจสอบ: ${Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy HH:mm:ss')}`;
    
    sendReply(userId, status);
    
  } catch (error) {
    Logger.log(`Error in handleSystemStatus: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงสถานะระบบ');
  }
}

/**
 * ฟังก์ชันใหม่: ข้อมูลเวอร์ชัน
 */
function handleVersionInfo(userId) {
  const versionInfo = `
📱 LINE BOT จ่าแจ้ง v2.0
🔧 ปรับปรุงล่าสุด: ${Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy')}

🆕 ฟีเจอร์ใหม่:
• ระบบ Cache เพื่อเพิ่มประสิทธิภาพ
• การค้นหากำลังพลและหนังสือคำสั่ง
• ตารางเวรอัตโนมัติ
• รายงานสถิติการใช้งาน
• การตั้งค่าการแจ้งเตือน
• ระบบ Error Handling ที่ดีขึ้น
• Smart Help Message
• โปรไฟล์ผู้ใช้แบบ Interactive

🔧 การปรับปรุง:
• เพิ่มความเร็วในการดึงข้อมูล 5 เท่า
• ลดการใช้ Quota ของ Google Sheets
• เพิ่มระบบ Log การใช้งาน
• ปรับปรุง UI/UX ของ Flex Messages
• เพิ่มการตรวจสอบข้อผิดพลาด

👨‍💻 พัฒนาโดย: ทีมพัฒนา LINE BOT จ่าแจ้ง
  `;
  
  sendReply(userId, versionInfo);
}

/**
 * Helper Functions
 */

/**
 * สร้างหรือดึงชีทที่มีอยู่
 */
function getOrCreateSheet(sheetName) {
  let sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
  if (!sheet) {
    sheet = SpreadsheetApp.getActive().insertSheet(sheetName);
    
    // สร้าง Header ตามประเภทชีท
    if (sheetName === 'การตั้งค่าการแจ้งเตือน') {
      sheet.getRange(1, 1, 1, 4).setValues([['User ID', 'ประเภทการแจ้งเตือน', 'สถานะ', 'วันที่แก้ไข']]);
    } else if (sheetName === 'กิจกรรมการใช้งาน') {
      sheet.getRange(1, 1, 1, 3).setValues([['User ID', 'เวลา', 'คำสั่ง']]);
    }
  }
  return sheet;
}

/**
 * บันทึกกิจกรรมการใช้งาน
 */
function logUserActivity(userId, command) {
  try {
    const activitySheet = getOrCreateSheet('กิจกรรมการใช้งาน');
    activitySheet.appendRow([userId, new Date(), command]);
  } catch (error) {
    Logger.log(`Error logging activity: ${error.message}`);
  }
}

/**
 * แจ้งเตือน Admin เมื่อเกิดข้อผิดพลาด
 */
function notifyAdminError(error) {
  try {
    const adminData = getCachedData('adminData');
    if (adminData && adminData.length > 1) {
      const adminUserId = adminData[1][0]; // Admin คนแรก
      sendReply(adminUserId, `⚠️ ข้อผิดพลาดในระบบ:\n${error.message}\n\nเวลา: ${new Date()}`);
    }
  } catch (e) {
    Logger.log(`Error notifying admin: ${e.message}`);
  }
}

/**
 * ดึงชื่อกำลังพลจากเลขทหาร
 */
function getPersonnelName(militaryId) {
  try {
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    const data = personnelSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][5]).trim() === String(militaryId).trim()) {
        return data[i][2]; // ชื่อ
      }
    }
    return null;
  } catch (error) {
    Logger.log(`Error getting personnel name: ${error.message}`);
    return null;
  }
}

/**
 * แปลงวันที่จากชีทเป็น Date Object
 */
function parseDateFromSheet(dateValue) {
  try {
    if (dateValue instanceof Date) {
      return dateValue;
    } else if (typeof dateValue === 'string') {
      const [day, month, year] = dateValue.split('/');
      const adYear = parseInt(year) > 2500 ? parseInt(year) - 543 : parseInt(year);
      return new Date(adYear, parseInt(month) - 1, parseInt(day));
    }
    return null;
  } catch (error) {
    Logger.log(`Error parsing date: ${error.message}`);
    return null;
  }
}

/**
 * สร้างตารางเวรอัตโนมัติ
 */
function generateDutySchedule(startDate, endDate, names) {
  const schedule = [];
  const currentDate = new Date(startDate);
  let nameIndex = 0;
  
  while (currentDate <= endDate) {
    // ข้ามวันเสาร์-อาทิตย์ (ถ้าต้องการ)
    if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
      const name = names[nameIndex % names.length];
      const formattedDate = Utilities.formatDate(currentDate, 'Asia/Bangkok', 'dd/MM/yyyy');
      
      schedule.push({
        date: formattedDate,
        rank: 'จ.ส.อ.', // ค่าเริ่มต้น
        firstName: name,
        lastName: '', // จะต้องใส่เพิ่มเติม
        position: 'เวรประตู',
        company: 'ร.1',
        phone: '081-234-5678' // ค่าเริ่มต้น
      });
      
      nameIndex++;
    }
    
    currentDate.setDate(currentDate.getDate() + 1);
  }
  
  return schedule;
}

/**
 * สร้าง Flex Message สำหรับโปรไฟล์
 */
function createProfileFlexMessage(personnelInfo, childrenCount) {
  return {
    type: "bubble",
    size: "giga",
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "👤 โปรไฟล์ของฉัน",
          weight: "bold",
          color: "#ffffff",
          size: "lg",
          align: "center"
        }
      ],
      backgroundColor: "#2E7D32",
      paddingAll: "md"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "md",
      contents: [
        {
          type: "text",
          text: `${personnelInfo[1]} ${personnelInfo[2]} ${personnelInfo[3]}`,
          weight: "bold",
          size: "lg",
          align: "center",
          color: "#1976D2"
        },
        {
          type: "separator",
          margin: "md"
        },
        {
          type: "box",
          layout: "vertical",
          spacing: "sm",
          contents: [
            createInfoRow("🏢", "กองร้อย", personnelInfo[0]),
            createInfoRow("🎖️", "ตำแหน่ง", personnelInfo[7]),
            createInfoRow("🔰", "เหล่า", personnelInfo[8]),
            createInfoRow("🆔", "เลขทหาร", personnelInfo[5]),
            createInfoRow("👶", "จำนวนบุตร", `${childrenCount} คน`),
            createInfoRow("⏳", "อายุ", `${personnelInfo[16]} ปี`),
            createInfoRow("📆", "ปีเกษียณ", personnelInfo[17])
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "button",
          action: {
            type: "message",
            label: "ดูข้อมูลบุตร",
            text: "/ข้อมูลบุตรของฉัน"
          },
          style: "primary",
          height: "sm"
        },
        {
          type: "button",
          action: {
            type: "message",
            label: "ดูเวรของฉัน",
            text: "/เวรของฉัน"
          },
          style: "secondary",
          height: "sm"
        }
      ],
      spacing: "sm"
    }
  };
}

/**
 * สร้าง Flex Message สำหรับเวรที่กำลังจะมาถึง
 */
function createUpcomingDutiesFlexMessage(name, duties) {
  const dutyContents = duties.map(duty => ({
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "text",
        text: `📅 ${duty.date}`,
        weight: "bold",
        size: "sm",
        color: "#1976D2"
      },
      {
        type: "text",
        text: `📍 ${duty.duty}`,
        size: "xs",
        color: "#666666"
      },
      {
        type: "text",
        text: `🏢 ${duty.company}`,
        size: "xs",
        color: "#666666"
      }
    ],
    margin: "sm",
    paddingAll: "md",
    backgroundColor: "#F5F5F5",
    cornerRadius: "8px"
  }));

  return {
    type: "bubble",
    size: "giga",
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "⏰ เวรที่กำลังจะมาถึง",
          weight: "bold",
          color: "#ffffff",
          size: "md",
          align: "center"
        }
      ],
      backgroundColor: "#FF6F00",
      paddingAll: "md"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "md",
      contents: [
        {
          type: "text",
          text: `👤 ${name}`,
          weight: "bold",
          size: "md",
          align: "center"
        },
        {
          type: "separator",
          margin: "md"
        },
        ...dutyContents
      ]
    }
  };
}

/**
 * สร้างแถวข้อมูลสำหรับ Flex Message
 */
function createInfoRow(icon, label, value) {
  return {
    type: "box",
    layout: "horizontal",
    contents: [
      {
        type: "text",
        text: `${icon} ${label}`,
        size: "sm",
        color: "#666666",
        flex: 2
      },
      {
        type: "text",
        text: String(value || 'ไม่ระบุ'),
        size: "sm",
        wrap: true,
        flex: 3,
        align: "end"
      }
    ]
  };
}

/**
 * ข้อความช่วยเหลือแบบ Smart
 */
function getSmartHelpMessage(userInput) {
  const suggestions = {
    'เวร': 'ลองใช้คำสั่ง /เวรของฉัน หรือ /เวรประจำเดือน',
    'บุตร': 'ลองใช้คำสั่ง /ข้อมูลบุตรของฉัน หรือ /เพิ่มบุตร',
    'ข้อมูล': 'ลองใช้คำสั่ง /ข้อมูลกำลังพลของฉัน หรือ /โปรไฟล์',
    'คำสั่ง': 'ลองใช้คำสั่ง /ค้นหาหนังสือคำสั่ง',
    'รายงาน': 'ลองใช้คำสั่ง /สรุปรายงาน หรือ /รายงานเวรประจำเดือน'
  };
  
  for (const [keyword, suggestion] of Object.entries(suggestions)) {
    if (userInput.toLowerCase().includes(keyword)) {
      return `💡 ${suggestion}\n\nหรือพิมพ์ /ช่วยเหลือ เพื่อดูคำสั่งทั้งหมด`;
    }
  }
  
  return `❓ ไม่เข้าใจคำสั่ง "${userInput}"\n\nพิมพ์ /ช่วยเหลือ เพื่อดูคำสั่งทั้งหมด หรือ /help สำหรับความช่วยเหลือ`;
}

/**
 * ปรับปรุงฟังก์ชันส่งข้อความให้รองรับข้อความยาว
 */
function sendReply(userId, text) {
  try {
    // ตรวจสอบความยาวข้อความ
    if (text.length > MAX_MESSAGE_LENGTH) {
      const chunks = text.match(new RegExp(`.{1,${MAX_MESSAGE_LENGTH}}`, 'g'));
      chunks.forEach((chunk, index) => {
        setTimeout(() => {
          UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
            },
            payload: JSON.stringify({
              to: userId,
              messages: [{ 
                type: "text", 
                text: index === 0 ? chunk : `(ต่อ ${index + 1}) ${chunk}`
              }]
            })
          });
        }, index * 1000); // หน่วงเวลา 1 วินาทีระหว่างข้อความ
      });
    } else {
      UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", {
        method: "post",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
        },
        payload: JSON.stringify({
          to: userId,
          messages: [{ type: "text", text }]
        })
      });
    }
  } catch (error) {
    Logger.log(`Error sending reply: ${error.message}`);
  }
}

/**
 * ปรับปรุงฟังก์ชันส่ง Flex Message
 */
function sendFlex(userId, flexContent) {
  try {
    UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", {
      method: "post",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
      },
      payload: JSON.stringify({
        to: userId,
        messages: [
          {
            type: "flex",
            altText: "📋 รายละเอียดข้อมูล",
            contents: flexContent
          }
        ]
      })
    });
  } catch (error) {
    Logger.log(`Error sending flex message: ${error.message}`);
  }
}

/**
 * ข้อความช่วยเหลือที่ปรับปรุงแล้ว
 */
function getHelpMessage() {
  return `🤖 **ระบบจัดการข้อมูลทหาร LINE Bot v2.0**

📋 **การลงทะเบียน**
• ลงทะเบียน <เลขประจำตัวทหาร>

👤 **ข้อมูลส่วนตัว**
• /โปรไฟล์ - ดูข้อมูลส่วนตัวแบบครบถ้วน
• /ข้อมูลกำลังพลของฉัน - ดูข้อมูลส่วนตัว
• /ข้อมูลบุตรของฉัน - ดูข้อมูลบุตรของตนเอง

⏰ **ระบบเวรยาม**
• /เวรของฉัน - ดูเวรวันนี้
• /เวรต่อไป - ดูเวรที่กำลังจะมาถึง
• /เวรประจำเดือน - ดูเวรทั้งเดือน
• /เวรย้อนหลัง - ดูประวัติเวร

👶 **จัดการข้อมูลบุตร**
• /เพิ่มบุตร <รายละเอียด>
• /แก้ไขบุตร <ชื่อเดิม>|<รายละเอียดใหม่>
• /ลบบุตร <ชื่อ-สกุล>
• /ดูข้อมูลบุตรทั้งหมด

👥 **จัดการกำลังพล** (เฉพาะผู้บริหาร)
• /เพิ่มกำลังพล <รายละเอียด>
• /แก้ไขกำลังพล <รายละเอียด>
• /ลบกำลังพล <เลขทหาร>
• /ดูข้อมูลกำลังพลทั้งหมด
• /ค้นหากำลังพล <คีย์เวิร์ด>

🛡️ **จัดการเวรยาม** (เฉพาะผู้บริหาร)
• /เพิ่มเวร <รายละเอียด>
• /แก้ไขเวร <รายละเอียด>
• /ลบเวร <วันที่>|<ชื่อ>
• /ดูข้อมูลเวรทั้งหมด
• /สร้างตารางเวร <วันเริ่ม>|<วันสิ้นสุด>|<รายชื่อ>

📜 **จัดการหนังสือคำสั่ง**
• /เพิ่มหนังสือคำสั่ง <รายละเอียด> (ผู้บริหาร)
• /แก้ไขหนังสือคำสั่ง <รายละเอียด> (ผู้บริหาร)
• /ลบหนังสือคำสั่ง <รายละเอียด> (ผู้บริหาร)
• /ค้นหาหนังสือคำสั่ง <คีย์เวิร์ด>

📊 **รายงานและสถิติ** (เฉพาะผู้บริหาร)
• /บุตรทั้งหมดของกองร้อย
• /สรุปรายงาน
• /รายงานเวรประจำเดือน
• /สถิติการใช้งาน

🔧 **การตั้งค่า**
• /ตั้งค่าการแจ้งเตือน <ประเภท>|<เปิด/ปิด>
• /ทดสอบการแจ้งเตือน

🖥️ **ระบบ** (เฉพาะผู้บริหาร)
• /สถานะระบบ
• /ข้อมูลเวอร์ชัน

💡 **คำสั่งลัด**
• /help หรือ /ช่วยเหลือ - แสดงข้อความนี้

🔥 **ฟีเจอร์ใหม่ v2.0:**
- ระบบ Cache เพิ่มความเร็ว 5 เท่า
- Smart Help แสดงคำแนะนำตามคำที่พิมพ์
- การค้นหาข้อมูลแบบ Real-time
- รายงานสถิติการใช้งาน
- ตารางเวรอัตโนมัติ
- การแจ้งเตือนแบบกำหนดเอง

⚡ **เคล็ดลับ:** พิมพ์คำที่เกี่ยวข้องกับสิ่งที่ต้องการ เช่น "เวร", "บุตร", "ข้อมูล" ระบบจะแนะนำคำสั่งที่เหมาะสม!`;
}

// ====================================================================
// ฟังก์ชันเดิมที่ปรับปรุงแล้ว (เหลือเฉพาะส่วนที่สำคัญ)
// ====================================================================

/**
 * ลงทะเบียนผู้ใช้หรืออัปเดตเลขประจำตัวทหาร (ปรับปรุงแล้ว)
 */
function handleRegistration(userId, text) {
  try {
    const parts = text.split(' ');
    if (parts.length !== 2 || parts[0] !== 'ลงทะเบียน') {
      return sendReply(userId, '❗ โปรดพิมพ์ว่า: ลงทะเบียน <เลขประจำตัวทหาร>\nตัวอย่าง: ลงทะเบียน 1565601540');
    }

    const militaryId = parts[1];
    
    // ตรวจสอบรูปแบบเลขทหาร (10 หลัก)
    if (!/^\d{10}$/.test(militaryId)) {
      return sendReply(userId, '❗ เลขประจำตัวทหารต้องเป็นตัวเลข 10 หลัก');
    }

    const loginSheet = SpreadsheetApp.getActive().getSheetByName('LOGIN');
    const loginData = loginSheet.getDataRange().getValues();
    
    const existingUser = loginData.find(row => row[0] === userId);
    const alreadyUsed = loginData.find(row => row[1] === militaryId && row[0] !== userId);

    if (alreadyUsed) {
      return sendReply(userId, '❌ เลขประจำตัวทหารนี้มีผู้ใช้งานแล้ว');
    }

    if (existingUser) {
      // อัปเดตเลขทหารใหม่
      const rowIndex = loginData.findIndex(row => row[0] === userId);
      loginSheet.getRange(rowIndex + 1, 2).setValue(militaryId);
      refreshCache(); // รีเฟรช Cache
      return sendReply(userId, '✅ อัปเดตเลขประจำตัวทหารเรียบร้อย');
    } else {
      // ลงทะเบียนใหม่
      loginSheet.appendRow([userId, militaryId, new Date()]);
      refreshCache(); // รีเฟรช Cache
      return sendReply(userId, `✅ ลงทะเบียนสำเร็จ!\n\nเลขประจำตัวทหาร: ${militaryId}\nสามารถใช้คำสั่งต่างๆ ได้แล้ว\n\nลองพิมพ์ /โปรไฟล์ เพื่อดูข้อมูลของคุณ`);
    }
    
  } catch (error) {
    Logger.log(`Error in handleRegistration: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการลงทะเบียน');
  }
}

/**
 * เพิ่มข้อมูลบุตร (ปรับปรุงแล้ว)
 */
function handleAddChild(userId, text) {
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');

  try {
    const parts = text.replace('/เพิ่มบุตร ', '').split('|');
    if (parts.length !== 7) {
      return sendReply(userId, `❗ รูปแบบไม่ถูกต้อง
      
📝 รูปแบบที่ถูกต้อง:
/เพิ่มบุตร <ชื่อ-สกุล>|<วันเกิด(DD/MM/YYYY)>|<อายุ>|<ระดับการศึกษา>|<ระดับชั้น>|<ชื่อสถานศึกษา>|<ผลการเรียน>

ตัวอย่าง:
/เพิ่มบุตร สมชาย ใจดี|01/01/2010|14|มัธยมศึกษาตอนต้น|ม.2|โรงเรียนวัดใหญ่|3.25`);
    }

    const [name, birthdate, age, educationLevel, grade, school, result] = parts.map(p => p.trim());

    // ตรวจสอบรูปแบบวันเกิด
    if (!parseThaiDateToDateObject(birthdate)) {
      return sendReply(userId, '❗ รูปแบบวันเกิดไม่ถูกต้อง กรุณาใช้ DD/MM/YYYY');
    }

    // ตรวจสอบอายุ
    if (!/^\d+$/.test(age) || parseInt(age) < 0 || parseInt(age) > 30) {
      return sendReply(userId, '❗ อายุต้องเป็นตัวเลข 0-30 ปี');
    }

    const childSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลบุตร-ธิดา');
    
    // ตรวจสอบว่ามีชื่อซ้ำหรือไม่
    const existingData = childSheet.getDataRange().getValues();
    const duplicate = existingData.find((row, index) => 
      index > 0 && row[0] == militaryId && row[1] === name
    );
    
    if (duplicate) {
      return sendReply(userId, `❌ มีข้อมูลบุตรชื่อ "${name}" อยู่แล้ว`);
    }

    childSheet.appendRow([militaryId, name, birthdate, age, educationLevel, grade, school, result, new Date()]);
    
    // ส่งข้อความยืนยันพร้อม Flex Message
    sendReply(userId, `✅ เพิ่มข้อมูลบุตร "${name}" เรียบร้อยแล้ว`);
    
    // ส่ง Flex Message แสดงข้อมูลที่เพิ่ม
    setTimeout(() => {
      sendFlexChildInfo(userId, name, age, school, grade, result);
    }, 1000);
    
  } catch (error) {
    Logger.log(`Error in handleAddChild: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการเพิ่มข้อมูลบุตร');
  }
}

/**
 * แปลงวันที่จากรูปแบบ DD/MM/YYYY (พ.ศ. หรือ ค.ศ.) เป็นวัตถุ Date (ปรับปรุงแล้ว)
 */
function parseThaiDateToDateObject(dateString) {
  try {
    if (!dateString || typeof dateString !== 'string') return null;
    
    const parts = dateString.trim().split('/');
    if (parts.length !== 3) return null;

    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    let year = parseInt(parts[2], 10);

    // ตรวจสอบค่าพื้นฐาน
    if (isNaN(day) || isNaN(month) || isNaN(year)) return null;
    if (day < 1 || day > 31 || month < 1 || month > 12) return null;

    // แปลงปี พ.ศ. เป็น ค.ศ.
    if (year > 2500) {
      year -= 543;
    }

    // ตรวจสอบปีที่สมเหตุสมผล
    if (year < 1900 || year > 2100) return null;

    const date = new Date(year, month - 1, day);

    // ตรวจสอบความถูกต้องของวันที่
    if (date.getDate() !== day || date.getMonth() + 1 !== month || date.getFullYear() !== year) {
      return null;
    }
    
    return date;
  } catch (error) {
    Logger.log(`Error parsing date: ${error.message}`);
    return null;
  }
}

/**
 * ปรับปรุงฟังก์ชันจัดการเวรยาม
 */
function handleCommandDutyToday(e) {
  const userId = e.source.userId;
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');

  try {
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('เวร - ยาม');
    const name = getPersonnelName(militaryId);
    
    if (!name) return sendReply(userId, '❌ ไม่พบข้อมูลชื่อกำลังพล');

    const today = Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy');
    const ddata = dutySheet.getDataRange().getValues();
    let foundDuty = false;

    for (let i = 1; i < ddata.length; i++) {
      const row = ddata[i];
      if (!row[0] || !row[2]) continue;

      let dutyDateStr = '';
      if (row[0] instanceof Date) {
        dutyDateStr = Utilities.formatDate(row[0], 'Asia/Bangkok', 'dd/MM/yyyy');
      } else {
        dutyDateStr = row[0].toString();
      }

      if (dutyDateStr === today && row[2] === name) {
        const rank = row[1] || 'ไม่ระบุยศ';
        const firstName = row[2] || '';
        const lastName = row[3] || '';
        const duty = row[4] || 'ไม่ระบุหน้าที่';
        const company = row[5] || 'ไม่ระบุกองร้อย';
        const phone = row[6] || 'ไม่ระบุเบอร์โทร';

        const fullName = `${rank} ${firstName} ${lastName}`;
        sendFlexDutyReminder(userId, fullName, duty, company, phone);
        foundDuty = true;
        break;
      }
    }

    if (!foundDuty) {
      sendReply(userId, '✅ วันนี้คุณไม่มีเวรยาม\n\nลองดูเวรต่อไปด้วย /เวรต่อไป');
    }
    
  } catch (error) {
    Logger.log(`Error in handleCommandDutyToday: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงข้อมูลเวร');
  }
}

/**
 * ปรับปรุงฟังก์ชันจัดการข้อมูลกำลังพล
 */
function handleCommandPersonnelInfo(e) {
  const userId = e.source.userId;
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');

  try {
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    const pData = personnelSheet.getDataRange().getValues();

    for (let i = 1; i < pData.length; i++) {
      if (String(pData[i][5]).trim() === String(militaryId).trim()) {
        const data = pData[i];
        const imageUrl = data[17] || 'https://via.placeholder.com/150x150/4CAF50/white?text=No+Image';
        
        const flex = {
          type: "bubble",
          size: "giga",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "image",
                url: imageUrl,
                size: "full",
                aspectMode: "cover",
                aspectRatio: "1:1",
                gravity: "center"
              },
              {
                type: "box",
                layout: "vertical",
                spacing: "sm",
                paddingAll: "lg",
                contents: [
                  {
                    type: "text",
                    text: "🪖 ข้อมูลกำลังพล",
                    weight: "bold",
                    color: "#1DB446",
                    size: "lg",
                    align: "center"
                  },
                  {
                    type: "separator",
                    margin: "md"
                  },
                  {
                    type: "text",
                    text: `${data[1] || ''} ${data[2] || ''} ${data[3] || ''}`,
                    weight: "bold",
                    size: "lg",
                    align: "center",
                    margin: "md"
                  },
                  {
                    type: "box",
                    layout: "vertical",
                    margin: "md",
                    spacing: "xs",
                    contents: [
                      { type: "text", text: `📌 กองร้อย : ${data[0] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🆔 หมายเลข ปชช. : ${data[4] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🪖 หมายเลขทหาร : ${data[5] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `📍 สังกัด : ${data[6] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🎖️ ตำแหน่ง : ${data[7] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🔰 เหล่า : ${data[8] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🏠 กำเนิด : ${data[9] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🎂 วันเกิด : ${data[10] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `⏳ อายุ : ${data[11] || 'ไม่ระบุ'} ปี`, size: "sm", wrap: true },
                      { type: "text", text: `🗓️ วันขึ้นทะเบียน : ${data[12] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🗓️ วันที่บรรจุ : ${data[13] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `🗓️ วันที่ครองยศ : ${data[14] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `💰 เงินเดือนปัจจุบัน : ${data[15] || 'ไม่ระบุ'}`, size: "sm", wrap: true },
                      { type: "text", text: `📆 ปีเกษียณ : ${data[16] || 'ไม่ระบุ'}`, size: "sm", wrap: true }
                    ]
                  }
                ]
              }
            ]
          },
          styles: {
            body: {
              separator: true
            }
          }
        };
        
        sendFlex(userId, flex);
        return;
      }
    }
    
    sendReply(userId, '📭 ไม่พบข้อมูลกำลังพลที่ตรงกัน\n\nกรุณาตรวจสอบการลงทะเบียนหรือติดต่อผู้ดูแลระบบ');
    
  } catch (error) {
    Logger.log(`Error in handleCommandPersonnelInfo: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงข้อมูลกำลังพล');
  }
}

/**
 * ปรับปรุงฟังก์ชันดูข้อมูลบุตร
 */
function handleCommandChildInfo(e) {
  const userId = e.source.userId;
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');

  try {
    const childSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลบุตร-ธิดา');
    const children = childSheet.getDataRange().getValues()
      .slice(1)
      .filter(row => row[0] == militaryId);

    if (children.length === 0) {
      return sendReply(userId, `📭 ไม่มีข้อมูลบุตรที่เชื่อมกับบัญชีนี้

💡 เพิ่มข้อมูลบุตรด้วยคำสั่ง:
/เพิ่มบุตร <ชื่อ-สกุล>|<วันเกิด>|<อายุ>|<ระดับการศึกษา>|<ระดับชั้น>|<ชื่อสถานศึกษา>|<ผลการเรียน>`);
    }

    // ส่งข้อความสรุป
    sendReply(userId, `👶 **พบข้อมูลบุตร ${children.length} คน**\n\nกำลังส่งรายละเอียดแต่ละคน...`);

    // ส่ง Flex Message สำหรับแต่ละคน
    children.forEach((child, index) => {
      setTimeout(() => {
        sendFlexChildInfo(userId, child[1], child[3], child[6], child[5], child[7]);
      }, (index + 1) * 1500); // หน่วงเวลา 1.5 วินาที
    });
    
  } catch (error) {
    Logger.log(`Error in handleCommandChildInfo: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการดึงข้อมูลบุตร');
  }
}

/**
 * ปรับปรุงฟังก์ชันส่ง Flex Message ข้อมูลบุตร
 */
function sendFlexChildInfo(userId, name, age, school, grade, result) {
  const flex = {
    type: "bubble",
    size: "giga",
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "👶 ข้อมูลบุตร",
          weight: "bold",
          color: "#ffffff",
          size: "lg",
          align: "center"
        }
      ],
      backgroundColor: "#E91E63",
      paddingAll: "md"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "md",
      paddingAll: "lg",
      contents: [
        {
          type: "text",
          text: name || 'ไม่ระบุชื่อ',
          weight: "bold",
          size: "lg",
          align: "center",
          color: "#1976D2"
        },
        {
          type: "separator",
          margin: "md"
        },
        {
          type: "box",
          layout: "vertical",
          spacing: "sm",
          contents: [
            createInfoRow("🎂", "อายุ", `${age || 'ไม่ระบุ'} ปี`),
            createInfoRow("🎓", "ระดับชั้น", grade || 'ไม่ระบุ'),
            createInfoRow("🏫", "สถานศึกษา", school || 'ไม่ระบุ'),
            createInfoRow("📊", "ผลการเรียน", result || 'ไม่ระบุ')
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "💡 แก้ไขข้อมูลด้วย /แก้ไขบุตร",
          size: "xs",
          color: "#666666",
          align: "center"
        }
      ],
      paddingTop: "sm"
    }
  };
  
  sendFlex(userId, flex);
}

/**
 * ปรับปรุงฟังก์ชันส่ง Flex Message แจ้งเตือนเวรยาม
 */
function sendFlexDutyReminder(userId, fullName, duty, company, phone) {
  const flex = {
    type: "bubble",
    size: "giga",
    header: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "⏰ เวรยามวันนี้",
          weight: "bold",
          color: "#ffffff",
          size: "lg",
          align: "center"
        },
        {
          type: "text",
          text: Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy'),
          color: "#ffffff",
          size: "sm",
          align: "center"
        }
      ],
      backgroundColor: "#FF5722",
      paddingAll: "md"
    },
    body: {
      type: "box",
      layout: "vertical",
      spacing: "md",
      paddingAll: "lg",
      contents: [
        {
          type: "text",
          text: fullName,
          weight: "bold",
          size: "lg",
          align: "center",
          color: "#1976D2"
        },
        {
          type: "separator",
          margin: "md"
        },
        {
          type: "box",
          layout: "vertical",
          spacing: "sm",
          contents: [
            createInfoRow("🛡️", "ปฏิบัติหน้าที่", duty),
            createInfoRow("🏢", "กองร้อย", company),
            createInfoRow("📞", "เบอร์โทร", phone)
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "🔔 แจ้งเตือนอัตโนมัติจากระบบ",
          size: "xs",
          color: "#666666",
          align: "center"
        }
      ],
      paddingTop: "sm"
    }
  };
  
  sendFlex(userId, flex);
}

/**
 * ปรับปรุงฟังก์ชันสร้างรายงานบุตรทั้งกองร้อย
 */
function handleCompanyChildrenReport(e) {
  const userId = e.source.userId;
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์ดูรายงานนี้');
  }

  try {
    const childSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลบุตร-ธิดา');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');

    if (!childSheet || !personnelSheet) {
      return sendReply(userId, '❌ ไม่พบชีทข้อมูลที่จำเป็น กรุณาตรวจสอบการตั้งค่า');
    }

    const childData = childSheet.getDataRange().getValues();
    const personnelData = personnelSheet.getDataRange().getValues();

    if (childData.length <= 1 && personnelData.length <= 1) {
      return sendReply(userId, '📭 ไม่มีข้อมูลในระบบเพื่อสร้างรายงาน');
    }

    const children = childData.slice(1);
    const personnel = personnelData.slice(1);

    // จัดกลุ่มบุตรตามเลขทหาร
    const childrenByMilitaryId = {};
    children.forEach(child => {
      if (child[0]) {
        const militaryId = String(child[0]).trim();
        if (!childrenByMilitaryId[militaryId]) {
          childrenByMilitaryId[militaryId] = [];
        }
        childrenByMilitaryId[militaryId].push(child);
      }
    });

    // สร้างรายงาน
    let report = '📊 **รายงานบุตรทั้งกองร้อย**\n';
    report += `📅 วันที่: ${Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy HH:mm')}\n\n`;
    
    let totalChildren = 0;
    let schoolAgeChildren = 0;
    let personnelWithChildren = 0;

    personnel.forEach(person => {
      if (person[5]) {
        const militaryId = String(person[5]).trim();
        const rank = person[1] || 'ไม่ระบุยศ';
        const firstName = person[2] || 'ไม่ระบุชื่อ';
        const lastName = person[3] || 'ไม่ระบุสกุล';
        const company = person[0] || 'ไม่ระบุกองร้อย';

        const childrenOfThisPersonnel = childrenByMilitaryId[militaryId] || [];

        if (childrenOfThisPersonnel.length > 0) {
          personnelWithChildren++;
          report += `**${rank} ${firstName} ${lastName} (${company})**\n`;
          
          childrenOfThisPersonnel.forEach((child, index) => {
            const childName = child[1] || 'ไม่ระบุชื่อ';
            const childAge = parseInt(child[3], 10) || 0;
            const childEducationLevel = child[4] || 'ไม่ระบุ';
            const childSchool = child[6] || 'ไม่ระบุ';

            report += `  ${index + 1}. ${childName} (อายุ ${childAge} ปี)\n`;
            report += `     การศึกษา: ${childEducationLevel}, โรงเรียน: ${childSchool}\n`;

            totalChildren++;
            if (childAge >= 6 && childAge <= 18) {
              schoolAgeChildren++;
            }
          });
          report += '\n';
        }
      }
    });

    // สรุปสถิติ
    report += `---\n**📈 สรุปสถิติ:**\n`;
    report += `👥 กำลังพลที่มีบุตร: ${personnelWithChildren} คน\n`;
    report += `👶 จำนวนบุตรรวมทั้งหมด: ${totalChildren} คน\n`;
    report += `🎓 จำนวนบุตรวัยเรียน (6-18 ปี): ${schoolAgeChildren} คน\n`;
    report += `📊 เปอร์เซ็นต์บุตรวัยเรียน: ${totalChildren > 0 ? Math.round((schoolAgeChildren/totalChildren)*100) : 0}%`;

    sendReply(userId, report);
    
  } catch (error) {
    Logger.log(`Error in handleCompanyChildrenReport: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการสร้างรายงาน');
  }
}

/**
 * ปรับปรุงฟังก์ชันส่งแจ้งเตือนเวรยามประจำวัน
 */
function sendDailyDutyReminder() {
  try {
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('เวร - ยาม');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('ข้อมูลกำลังพล');
    const settingsSheet = SpreadsheetApp.getActive().getSheetByName('การตั้งค่าการแจ้งเตือน');
    
    const ddata = dutySheet.getDataRange().getValues();
    const pdata = personnelSheet.getDataRange().getValues();
    const today = Utilities.formatDate(new Date(), 'Asia/Bangkok', 'dd/MM/yyyy');

    // สร้าง mapping ระหว่าง militaryId กับ userId
    const loginData = getCachedData('loginData');
    const militaryIdToUserId = {};
    
    if (loginData) {
      loginData.slice(1).forEach(row => {
        militaryIdToUserId[row[1]] = row[0];
      });
    }

    // ตรวจสอบการตั้งค่าการแจ้งเตือน
    const notificationSettings = {};
    if (settingsSheet) {
      const settingsData = settingsSheet.getDataRange().getValues();
      settingsData.slice(1).forEach(row => {
        if (row[1] === 'เวรยาม' && row[2] === 'เปิด') {
          notificationSettings[row[0]] = true;
        }
      });
    }

    let notificationsSent = 0;

    ddata.slice(1).forEach(row => {
      if (row[0] && row[2]) {
        let dutyDateStr = '';
        if (row[0] instanceof Date) {
          dutyDateStr = Utilities.formatDate(row[0], 'Asia/Bangkok', 'dd/MM/yyyy');
        } else {
          dutyDateStr = row[0].toString();
        }

        if (dutyDateStr === today) {
          const firstName = row[2];
          const lastName = row[3];

          // หา militaryId จากชื่อ
          let militaryIdFound = null;
          for (let i = 1; i < pdata.length; i++) {
            if (pdata[i][2] === firstName && pdata[i][3] === lastName) {
              militaryIdFound = pdata[i][5];
              break;
            }
          }

          if (militaryIdFound && militaryIdToUserId[militaryIdFound]) {
            const targetUserId = militaryIdToUserId[militaryIdFound];
            
            // ตรวจสอบการตั้งค่าการแจ้งเตือน (ถ้าไม่มีการตั้งค่า ให้แจ้งเตือนปกติ)
            if (!settingsSheet || !notificationSettings.hasOwnProperty(targetUserId) || notificationSettings[targetUserId]) {
              const rank = row[1] || 'ไม่ระบุยศ';
              const duty = row[4] || 'ไม่ระบุหน้าที่';
              const company = row[5] || 'ไม่ระบุกองร้อย';
              const phone = row[6] || 'ไม่ระบุเบอร์โทร';
              const fullName = `${rank} ${firstName} ${lastName}`;
              
              sendFlexDutyReminder(targetUserId, fullName, duty, company, phone);
              notificationsSent++;
            }
          } else {
            Logger.log(`ไม่พบ LINE User ID สำหรับ ${firstName} ${lastName} (เลขทหาร: ${militaryIdFound})`);
          }
        }
      }
    });

    Logger.log(`ส่งการแจ้งเตือนเวรยามสำเร็จ ${notificationsSent} รายการ`);
    
  } catch (error) {
    Logger.log(`Error in sendDailyDutyReminder: ${error.message}`);
    notifyAdminError(error);
  }
}

/**
 * สร้าง Trigger สำหรับการแจ้งเตือนรายวัน (ปรับปรุงแล้ว)
 */
function createDailyDutyReminderTrigger() {
  try {
    // ลบ Trigger เก่าทั้งหมด
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'sendDailyDutyReminder') {
        ScriptApp.deleteTrigger(trigger);
      }
    });

    // สร้าง Trigger ใหม่
    ScriptApp.newTrigger('sendDailyDutyReminder')
      .timeBased()
      .everyDays(1)
      .atHour(7)
      .nearMinute(30)
      .inTimezone('Asia/Bangkok')
      .create();

    Logger.log('Daily duty reminder trigger created successfully at 07:30 Asia/Bangkok');
    
  } catch (error) {
    Logger.log(`Error creating trigger: ${error.message}`);
  }
}

/**
 * ฟังก์ชันทดสอบการแจ้งเตือน
 */
function handleTestNotification(userId) {
  const militaryId = getUserMilitaryId(userId);
  if (!militaryId) return sendReply(userId, '❌ กรุณาลงทะเบียนก่อนใช้งาน');

  try {
    const name = getPersonnelName(militaryId);
    if (!name) return sendReply(userId, '❌ ไม่พบข้อมูลชื่อกำลังพล');

    // ส่งการแจ้งเตือนทดสอบ
    sendFlexDutyReminder(
      userId, 
      `จ.ส.อ. ${name}`, 
      'ทดสอบระบบ', 
      'ร.ทดสอบ', 
      '081-234-5678'
    );
    
    setTimeout(() => {
      sendReply(userId, '✅ ทดสอบการแจ้งเตือนเรียบร้อย!\n\n💡 หากต้องการปิดการแจ้งเตือน ใช้:\n/ตั้งค่าการแจ้งเตือน เวรยาม|ปิด');
    }, 2000);
    
  } catch (error) {
    Logger.log(`Error in handleTestNotification: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการทดสอบ');
  }
}

// ====================================================================
// ฟังก์ชันเพิ่มเติมสำหรับการจัดการระบบ
// ====================================================================

/**
 * ฟังก์ชันสำรองข้อมูล (Admin Only)
 */
function createDataBackup() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const backupName = `Backup_${Utilities.formatDate(new Date(), 'Asia/Bangkok', 'yyyyMMdd_HHmmss')}`;
    
    // สร้างสำเนาไฟล์
    DriveApp.getFileById(ss.getId()).makeCopy(backupName);
    
    Logger.log(`Backup created: ${backupName}`);
    return backupName;
    
  } catch (error) {
    Logger.log(`Error creating backup: ${error.message}`);
    return null;
  }
}

/**
 * ฟังก์ชันล้างข้อมูลเก่า (Admin Only)
 */
function cleanOldData() {
  try {
    const activitySheet = SpreadsheetApp.getActive().getSheetByName('กิจกรรมการใช้งาน');
    if (!activitySheet) return;
    
    const data = activitySheet.getDataRange().getValues();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 30); // เก็บข้อมูล 30 วัน
    
    // ลบข้อมูลที่เก่ากว่า 30 วัน
    for (let i = data.length - 1; i >= 1; i--) {
      const recordDate = new Date(data[i][1]);
      if (recordDate < cutoffDate) {
        activitySheet.deleteRow(i + 1);
      }
    }
    
    Logger.log('Old activity data cleaned successfully');
    
  } catch (error) {
    Logger.log(`Error cleaning old data: ${error.message}`);
  }
}

/**
 * ฟังก์ชันตรวจสอบสุขภาพระบบ
 */
function performSystemHealthCheck() {
  const healthReport = {
    timestamp: new Date(),
    sheets: {},
    triggers: {},
    cache: {},
    errors: []
  };
  
  try {
    // ตรวจสอบชีท
    const requiredSheets = ['ข้อมูลกำลังพล', 'ข้อมูลบุตร-ธิดา', 'เวร - ยาม', 'คำสั่งต่างๆ', 'LOGIN', 'ADMIN'];
    
    requiredSheets.forEach(sheetName => {
      const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
      if (sheet) {
        healthReport.sheets[sheetName] = {
          exists: true,
          rows: sheet.getLastRow(),
          columns: sheet.getLastColumn()
        };
      } else {
        healthReport.sheets[sheetName] = { exists: false };
        healthReport.errors.push(`Missing sheet: ${sheetName}`);
      }
    });
    
    // ตรวจสอบ Triggers
    const triggers = ScriptApp.getProjectTriggers();
    healthReport.triggers.count = triggers.length;
    healthReport.triggers.daily_reminder = triggers.some(t => t.getHandlerFunction() === 'sendDailyDutyReminder');
    
    // ตรวจสอบ Cache
    healthReport.cache.last_update = CACHE.lastCacheUpdate;
    healthReport.cache.has_login_data = CACHE.loginData !== null;
    healthReport.cache.has_admin_data = CACHE.adminData !== null;
    
    Logger.log('System health check completed:', JSON.stringify(healthReport, null, 2));
    return healthReport;
    
  } catch (error) {
    healthReport.errors.push(`Health check error: ${error.message}`);
    Logger.log('System health check failed:', error.message);
    return healthReport;
  }
}

/**
 * ฟังก์ชันสำหรับ Admin จัดการระบบ
 */
function handleAdminSystemControl(userId, text) {
  if (!checkAdminPermission(userId)) {
    return sendReply(userId, '❌ คุณไม่มีสิทธิ์จัดการระบบ');
  }
  
  const command = text.toLowerCase();
  
  try {
    if (command === '/admin backup') {
      const backupName = createDataBackup();
      if (backupName) {
        sendReply(userId, `✅ สำรองข้อมูลเรียบร้อย\nชื่อไฟล์: ${backupName}`);
      } else {
        sendReply(userId, '❌ เกิดข้อผิดพลาดในการสำรองข้อมูล');
      }
      
    } else if (command === '/admin cleanup') {
      cleanOldData();
      sendReply(userId, '✅ ล้างข้อมูลเก่าเรียบร้อย');
      
    } else if (command === '/admin health') {
      const healthReport = performSystemHealthCheck();
      let message = `🏥 **รายงานสุขภาพระบบ**\n\n`;
      
      // สถานะชีท
      message += `📋 **ชีทข้อมูล:**\n`;
      Object.entries(healthReport.sheets).forEach(([name, status]) => {
        message += `${status.exists ? '✅' : '❌'} ${name}`;
        if (status.exists) {
          message += ` (${status.rows} แถว)`;
        }
        message += `\n`;
      });
      
      // สถานะ Triggers
      message += `\n⏰ **Triggers:** ${healthReport.triggers.count} รายการ\n`;
      message += `📅 Daily Reminder: ${healthReport.triggers.daily_reminder ? '✅' : '❌'}\n`;
      
      // สถานะ Cache
      message += `\n💾 **Cache:**\n`;
      message += `Login Data: ${healthReport.cache.has_login_data ? '✅' : '❌'}\n`;
      message += `Admin Data: ${healthReport.cache.has_admin_data ? '✅' : '❌'}\n`;
      
      // ข้อผิดพลาด
      if (healthReport.errors.length > 0) {
        message += `\n⚠️ **ข้อผิดพลาด:**\n`;
        healthReport.errors.forEach(error => {
          message += `• ${error}\n`;
        });
      }
      
      message += `\n🕐 ตรวจสอบเมื่อ: ${Utilities.formatDate(healthReport.timestamp, 'Asia/Bangkok', 'dd/MM/yyyy HH:mm:ss')}`;
      
      sendReply(userId, message);
      
    } else if (command === '/admin cache refresh') {
      refreshCache();
      sendReply(userId, '✅ รีเฟรช Cache เรียบร้อย');
      
    } else {
      sendReply(userId, `🔧 **คำสั่ง Admin:**
      
/admin backup - สำรองข้อมูล
/admin cleanup - ล้างข้อมูลเก่า
/admin health - ตรวจสุขภาพระบบ
/admin cache refresh - รีเฟรช Cache`);
    }
    
  } catch (error) {
    Logger.log(`Error in handleAdminSystemControl: ${error.message}`);
    sendReply(userId, '❌ เกิดข้อผิดพลาดในการจัดการระบบ');
  }
}

/**
 * ฟังก์ชันสำหรับ Webhook Verification (สำหรับการตั้งค่า LINE Bot)
 */
function doGet(e) {
  return HtmlService.createHtmlOutput('LINE Bot จ่าแจ้ง v2.0 is running!');
}

/**
 * ฟังก์ชันเริ่มต้นระบบ (รันครั้งเดียวเมื่อติดตั้ง)
 */
function initializeSystem() {
  try {
    Logger.log('Initializing system...');
    
    // สร้างชีทที่จำเป็น
    const requiredSheets = [
      { name: 'LOGIN', headers: ['User ID', 'Military ID', 'Registration Date'] },
      { name: 'ADMIN', headers: ['User ID', 'Role', 'Added Date'] },
      { name: 'กิจกรรมการใช้งาน', headers: ['User ID', 'Timestamp', 'Command'] },
      { name: 'การตั้งค่าการแจ้งเตือน', headers: ['User ID', 'Type', 'Status', 'Updated Date'] }
    ];
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    requiredSheets.forEach(sheetConfig => {
      let sheet = ss.getSheetByName(sheetConfig.name);
      if (!sheet) {
        sheet = ss.insertSheet(sheetConfig.name);
        sheet.getRange(1, 1, 1, sheetConfig.headers.length).setValues([sheetConfig.headers]);
        sheet.getRange(1, 1, 1, sheetConfig.headers.length).setFontWeight('bold');
        Logger.log(`Created sheet: ${sheetConfig.name}`);
      }
    });
    
    // สร้าง Trigger
    createDailyDutyReminderTrigger();
    
    // รีเฟรช Cache
    refreshCache();
    
    Logger.log('System initialization completed successfully');
    
  } catch (error) {
    Logger.log(`Error initializing system: ${error.message}`);
  }
}

/**
 * ฟังก์ชันสำหรับการ Export ข้อมูล
 */
function exportDataToCSV(sheetName) {
  try {
    const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
    if (!sheet) return null;
    
    const data = sheet.getDataRange().getValues();
    let csv = '';
    
    data.forEach(row => {
      csv += row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',') + '\n';
    });
    
    const blob = Utilities.newBlob(csv, 'text/csv', `${sheetName}_${Utilities.formatDate(new Date(), 'Asia/Bangkok', 'yyyyMMdd')}.csv`);
    
    // บันทึกไฟล์ใน Google Drive
    const file = DriveApp.createFile(blob);
    
    return file.getUrl();
    
  } catch (error) {
    Logger.log(`Error exporting data: ${error.message}`);
    return null;
  }
}

/**
 * ฟังก์ชันสำหรับการ Import ข้อมูล
 */
function importDataFromCSV(fileId, sheetName) {
  try {
    const file = DriveApp.getFileById(fileId);
    const csvContent = file.getBlob().getDataAsString();
    const rows = csvContent.split('\n').map(row => 
      row.split(',').map(cell => cell.replace(/^"|"$/g, '').replace(/""/g, '"'))
    );
    
    const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
    if (!sheet) return false;
    
    // ล้างข้อมูลเก่า (ยกเว้น header)
    if (sheet.getLastRow() > 1) {
      sheet.deleteRows(2, sheet.getLastRow() - 1);
    }
    
    // เพิ่มข้อมูลใหม่
    if (rows.length > 1) {
      sheet.getRange(2, 1, rows.length - 1, rows[0].length).setValues(rows.slice(1));
    }
    
    return true;
    
  } catch (error) {
    Logger.log(`Error importing data: ${error.message}`);
    return false;
  }
}

/**
 * ฟังก์ชันสำหรับการ Monitoring และ Alerting
 */
function setupMonitoring() {
  try {
    // สร้าง Trigger สำหรับตรวจสอบระบบทุก 6 ชั่วโมง
    ScriptApp.newTrigger('performSystemHealthCheck')
      .timeBased()
      .everyHours(6)
      .create();
      
    // สร้าง Trigger สำหรับล้างข้อมูลเก่าทุกสัปดาห์
    ScriptApp.newTrigger('cleanOldData')
      .timeBased()
      .everyWeeks(1)
      .onWeekDay(ScriptApp.WeekDay.SUNDAY)
      .atHour(2)
      .create();
      
    Logger.log('Monitoring triggers created successfully');
    
  } catch (error) {
    Logger.log(`Error setting up monitoring: ${error.message}`);
  }
}

// ====================================================================
// Utility Functions สำหรับการจัดการข้อมูล
// ====================================================================

/**
 * ฟังก์ชันตรวจสอบความถูกต้องของข้อมูล
 */
function validatePersonnelData(data) {
  const required = ['กองร้อย', 'ยศ', 'ชื่อ', 'สกุล', 'เลขบัตรประชาชน', 'เลขทหาร'];
  const errors = [];
  
  required.forEach((field, index) => {
    if (!data[index] || String(data[index]).trim() === '') {
      errors.push(`${field}ไม่ได้ระบุ`);
    }
  });
  
  // ตรวจสอบเลขบัตรประชาชน (13 หลัก)
  if (data[4] && !/^\d{13}$/.test(String(data[4]).replace(/-/g, ''))) {
    errors.push('เลขบัตรประชาชนไม่ถูกต้อง');
  }
  
  // ตรวจสอบเลขทหาร (10 หลัก)
  if (data[5] && !/^\d{10}$/.test(String(data[5]))) {
    errors.push('เลขทหารไม่ถูกต้อง');
  }
  
  return errors;
}

/**
 * ฟังก์ชันตรวจสอบความถูกต้องของข้อมูลบุตร
 */
function validateChildData(data) {
  const errors = [];
  
  if (!data[0] || String(data[0]).trim() === '') {
    errors.push('ชื่อ-สกุลไม่ได้ระบุ');
  }
  
  if (!data[1] || !parseThaiDateToDateObject(data[1])) {
    errors.push('วันเกิดไม่ถูกต้อง');
  }
  
  if (!data[2] || !/^\d+$/.test(data[2]) || parseInt(data[2]) < 0 || parseInt(data[2]) > 30) {
    errors.push('อายุไม่ถูกต้อง');
  }
  
  return errors;
}

/**
 * ฟังก์ชันสำหรับการ Sanitize ข้อมูล
 */
function sanitizeInput(input) {
  if (typeof input !== 'string') return input;
  
  return input
    .trim()
    .replace(/[<>]/g, '') // ลบ HTML tags
    .replace(/[^\u0E00-\u0E7F\w\s\-\.\(\)\/]/g, '') // เก็บเฉพาะอักขระไทย อังกฤษ ตัวเลข และเครื่องหมายพื้นฐาน
    .substring(0, 200); // จำกัดความยาว
}

/**
 * ฟังก์ชันสำหรับการ Format ข้อความ
 */
function formatMessage(message, maxLength = MAX_MESSAGE_LENGTH) {
  if (!message) return '';
  
  let formatted = String(message).trim();
  
  if (formatted.length > maxLength) {
    formatted = formatted.substring(0, maxLength - 3) + '...';
  }
  
  return formatted;
}

/**
 * ฟังก์ชันสำหรับการ Rate Limiting
 */
const RATE_LIMIT = {
  requests: {},
  limit: 10, // 10 requests per minute
  window: 60000 // 1 minute
};

function checkRateLimit(userId) {
  const now = Date.now();
  const userRequests = RATE_LIMIT.requests[userId] || [];
  
  // ลบ requests ที่เก่าเกิน window
  const validRequests = userRequests.filter(time => now - time < RATE_LIMIT.window);
  
  if (validRequests.length >= RATE_LIMIT.limit) {
    return false; // เกิน rate limit
  }
  
  validRequests.push(now);
  RATE_LIMIT.requests[userId] = validRequests;
  
  return true;
}

/**
 * ฟังก์ชันสำหรับการจัดการ Session
 */
const USER_SESSIONS = {};

function createUserSession(userId, data = {}) {
  USER_SESSIONS[userId] = {
    ...data,
    created: new Date(),
    lastActivity: new Date()
  };
}

function getUserSession(userId) {
  const session = USER_SESSIONS[userId];
  if (session) {
    session.lastActivity = new Date();
    return session;
  }
  return null;
}

function clearUserSession(userId) {
  delete USER_SESSIONS[userId];
}

// ====================================================================
// Constants และ Configuration
// ====================================================================

const BOT_CONFIG = {
  VERSION: '2.0',
  AUTHOR: 'ทีมพัฒนา LINE BOT จ่าแจ้ง',
  LAST_UPDATE: '2024-07-29',
  FEATURES: [
    'ระบบ Cache เพื่อเพิ่มประสิทธิภาพ',
    'การค้นหาข้อมูลแบบ Real-time',
    'ตารางเวรอัตโนมัติ',
    'รายงานสถิติการใช้งาน',
    'การแจ้งเตือนแบบกำหนดเอง',
    'ระบบ Error Handling ที่ดีขึ้น',
    'Smart Help Message',
    'โปรไฟล์ผู้ใช้แบบ Interactive',
    'ระบบ Rate Limiting',
    'การจัดการ Session',
    'Data Validation',
    'System Monitoring',
    'Auto Backup',
    'Export/Import ข้อมูล'
  ]
};

// Export functions สำหรับการใช้งานภายนอก
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    doPost,
    doGet,
    initializeSystem,
    createDailyDutyReminderTrigger,
    sendDailyDutyReminder,
    performSystemHealthCheck,
    createDataBackup,
    cleanOldData
  };
}

// ====================================================================
// จบไฟล์ - LINE BOT จ่าแจ้ง v2.0
// ====================================================================
