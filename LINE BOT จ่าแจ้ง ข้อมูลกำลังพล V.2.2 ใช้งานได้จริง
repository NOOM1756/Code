const CHANNEL_ACCESS_TOKEN = 'wPE1mSEtWD8ksUlDEFnFRIf+PzVxaLSu0JIC7TrnV1d0iTsYDdKBep59Fg+alB7Q81jaC9xW4SFq75b+5CEvVsl/07NXXecUYG/tGeVvEui4Wjm8CBU4+k/Yrw+a/poAvFEh4QrURtqQ+I88d+K9ngdB04t89/1O/w1cDnyilFU=';
const PROFILE_PICTURE_FOLDER_NAME = 'LINE_Bot_Profile_Pictures';
const COMMAND_FILES_FOLDER_NAME = 'LINE_Bot_Command_Files';

// Global cache for spreadsheet data
const CACHE_EXPIRATION_SECONDS = 300; // 5 minutes

function doPost(e) {
  try {
    const event = JSON.parse(e.postData.contents).events[0];
    const userId = event.source.userId;

    // Log the incoming message for debugging purposes
    Logger.log(`Received message from user: ${userId}, type: ${event.type}`);
    if (event.type === 'message' && event.message.type === 'text') {
      Logger.log(`Message text: ${event.message.text}`);
    }

    if (event.type === 'message') {
      if (event.message.type === 'text') {
        const text = event.message.text.trim();

        if (text.startsWith('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô')) handleRegistration(userId, text);
        else if (text === '/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') handleCommandChildInfo(event);
        else if (text === '/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') handleCommandWifeInfo(event);
        else if (text === '/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') handleCommandPersonnelInfo(event);
        else if (text.startsWith('/‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ')) handleSetProfilePicture(userId, text);
        else if (text === '/‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô') handleCommandDutyToday(event);
        else if (text === '/‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') handleMonthlyDuty(event);
        else if (text === '/‡πÄ‡∏ß‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á') handlePastDuties(event);
        else if (text.startsWith('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ')) handleAddPersonnel(userId, text);
        else if (text.startsWith('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ')) handleEditPersonnel(userId, text);
        else if (text.startsWith('/‡∏•‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ')) handleDeletePersonnel(userId, text);
        else if (text === '/‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') handleViewAllPersonnel(event);
        else if (text.startsWith('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£ ')) handleAddChild(userId, text);
        else if (text.startsWith('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£ ')) handleEditChild(userId, text);
        else if (text.startsWith('/‡∏•‡∏ö‡∏ö‡∏∏‡∏ï‡∏£ ')) handleDeleteChild(userId, text);
        else if (text === '/‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') handleViewAllChildren(event);
        else if (text.startsWith('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤ ')) handleAddWife(userId, text);
        else if (text.startsWith('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤ ')) handleEditWife(userId, text);
        else if (text.startsWith('/‡∏•‡∏ö‡∏†‡∏£‡∏£‡∏¢‡∏≤ ')) handleDeleteWife(userId, text);
        else if (text === '/‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') handleViewAllWives(event);
        else if (text.startsWith('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏£ ')) handleAddDuty(userId, text);
        else if (text.startsWith('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£ ')) handleEditDuty(userId, text);
        else if (text.startsWith('/‡∏•‡∏ö‡πÄ‡∏ß‡∏£ ')) handleDeleteDuty(userId, text);
        else if (text === '/‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') handleViewAllDuties(event);
        else if (text.startsWith('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ')) handleAddCommand(userId, text);
        else if (text.startsWith('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ')) handleEditCommand(userId, text);
        else if (text.startsWith('/‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ')) handleDeleteCommand(userId, text);
        else if (text.startsWith('/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ')) handleSearchCommand(userId, text);
        else if (text.startsWith('/‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ')) handleLinkCommandFile(userId, text);
        else if (text === '/‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢') handleCompanyChildrenReport(event);
        else if (text === '/‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') handleGenerateReport(event);
        else if (text.startsWith('/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ')) handleSearchPersonnel(userId, text);
        else if (text === '/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') handleViewAllCommands(userId);
        else if (text === '/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' || text === '/help') sendReply(userId, getHelpMessage());
        else if (text === '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') sendReply(userId, '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?');
        else if (text === '‡πÄ‡∏°‡∏ô‡∏π' || text === '‡∏Å‡∏•‡∏±‡∏ö') sendReply(userId, '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ');
        else {
          // Smart Help Message (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å)
          sendReply(userId, getSmartHelpMessage(text));
        }

      } else if (event.message.type === 'image' || event.message.type === 'file') {
        handleIncomingFileOrImage(userId, event.message.id, event.message.type, event.message.fileName, event.message.contentProvider);
      }
    }
  } catch (e) {
    Logger.log(`Global Error in doPost: ${e.message}, Stack: ${e.stack}`);
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${e.message}`);
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
 * @param {string} sheetName - ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó
 * @returns {Array<Array<any>>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
 */
function getSpreadsheetData(sheetName) {
  const cacheKey = `data_${sheetName}`;
  const cachedData = CacheService.getScriptCache().get(cacheKey);

  if (cachedData) {
    Logger.log(`Cache hit for sheet: ${sheetName}`);
    return JSON.parse(cachedData);
  }

  Logger.log(`Cache miss for sheet: ${sheetName}. Fetching from Spreadsheet.`);
  const sheet = SpreadsheetApp.getActive().getSheetByName(sheetName);
  if (!sheet) {
    Logger.log(`Sheet "${sheetName}" not found.`);
    return null;
  }
  const data = sheet.getDataRange().getValues();

  CacheService.getScriptCache().put(cacheKey, JSON.stringify(data), CACHE_EXPIRATION_SECONDS);
  return data;
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
 * @param {string} sheetName - ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó
 */
function clearCache(sheetName) {
  const cacheKey = `data_${sheetName}`;
  CacheService.getScriptCache().remove(cacheKey);
  Logger.log(`Cache cleared for sheet: ${sheetName}`);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE Bot
 * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
 */
function getHelpMessage() {
  return `ü§ñ **‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏´‡∏≤‡∏£ LINE Bot**

üìã **‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô**
‚Ä¢ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô <‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£>

üë§ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß**
‚Ä¢ /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
‚Ä¢ /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
‚Ä¢ /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
‚Ä¢ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå <‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£>

‚è∞ **‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°**
‚Ä¢ /‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô - ‡∏î‡∏π‡πÄ‡∏ß‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
‚Ä¢ /‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - ‡∏î‡∏π‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
‚Ä¢ /‡πÄ‡∏ß‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£

üìú **‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á**
‚Ä¢ /‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î>
‚Ä¢ /‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üÜï **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
‚Ä¢ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•**: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•, /‡∏•‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•, /‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏£‡∏£‡∏¢‡∏≤**: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤, /‡∏•‡∏ö‡∏†‡∏£‡∏£‡∏¢‡∏≤, /‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏ï‡∏£**: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£, /‡∏•‡∏ö‡∏ö‡∏∏‡∏ï‡∏£, /‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°**: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏£, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£, /‡∏•‡∏ö‡πÄ‡∏ß‡∏£, /‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á**: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á, /‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á, /‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
‚Ä¢ **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô**: /‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢, /‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á`;
}

/**
 * Smart Help Message: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
 * @param {string} unknownText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
 * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */
function getSmartHelpMessage(unknownText) {
  const lowerText = unknownText.toLowerCase();
  if (lowerText.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')) {
    return '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô, /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô, /‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô';
  }
  if (lowerText.includes('‡πÄ‡∏ß‡∏£') || lowerText.includes('‡∏¢‡∏≤‡∏°')) {
    return '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: /‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô, /‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, /‡πÄ‡∏ß‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á';
  }
  if (lowerText.includes('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')) {
    return '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: /‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• <‡∏ä‡∏∑‡πà‡∏≠>, /‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î>';
  }
  if (lowerText.includes('‡πÄ‡∏û‡∏¥‡πà‡∏°') || lowerText.includes('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') || lowerText.includes('‡∏•‡∏ö')) {
    return '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£, /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•, /‡∏•‡∏ö‡πÄ‡∏ß‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠';
  }
  return '‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
}


function sendReply(userId, text) {
  try {
    UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", {
      method: "post",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
      },
      payload: JSON.stringify({
        to: userId,
        messages: [{ type: "text", text }]
      })
    });
  } catch (e) {
    Logger.log(`Error sending reply: ${e.message}`);
  }
}

function sendFlex(userId, flexContent) {
  try {
    UrlFetchApp.fetch("https://api.line.me/v2/bot/message/push", {
      method: "post",
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + CHANNEL_ACCESS_TOKEN
      },
      payload: JSON.stringify({
        to: userId,
        messages: [
          {
            type: "flex",
            altText: "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            contents: flexContent
          }
        ]
      })
    });
  } catch (e) {
    Logger.log(`Error sending Flex message: ${e.message}`);
  }
}

function handleRegistration(userId, text) {
  try {
    const loginSheet = SpreadsheetApp.getActive().getSheetByName('LOGIN');
    if (!loginSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "LOGIN" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    const loginData = loginSheet.getDataRange().getValues();
    const parts = text.split(' ');

    if (parts.length !== 2 || parts[0] !== '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô') {
      return sendReply(userId, '‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô <‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£>\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 1565601540');
    }

    const militaryId = parts[1];
    let foundRowIndex = -1;
    let alreadyUsed = false;

    for (let i = 1; i < loginData.length; i++) {
      if (loginData[i][0] === userId) {
        foundRowIndex = i;
      }
      if (loginData[i][1] === militaryId) {
        alreadyUsed = true;
      }
    }

    if (alreadyUsed) {
      return sendReply(userId, '‚ùå ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    }

    if (foundRowIndex !== -1) {
      loginSheet.getRange(foundRowIndex + 1, 2).setValue(militaryId);
      sendReply(userId, '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    } else {
      loginSheet.appendRow([userId, militaryId]);
      sendReply(userId, '‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
    }
    clearCache('LOGIN');
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${e.message}`);
    Logger.log(`Error in handleRegistration: ${e.message}`);
  }
}

function handleAddChild(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const parts = text.replace('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£ ', '').split('|');
    if (parts.length !== 7) {
      return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏∏‡∏ï‡∏£>|<‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î(DD/MM/YYYY ‡∏û.‡∏®.)>|<‡∏≠‡∏≤‡∏¢‡∏∏>|<‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤>|<‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô>|<‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤>|<‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô>`);
    }

    const [childName, birthdateStr, age, educationLevel, grade, school, result] = parts.map(p => p.trim());
    const birthdate = parseThaiDateToDateObject(birthdateStr);
    if (!birthdate) {
      return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ DD/MM/YYYY (‡∏û.‡∏®. ‡πÄ‡∏ä‡πà‡∏ô 01/01/2553)');
    }
    const formattedBirthdate = formatDateToThaiBuddhist(birthdate);

    const childSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    if (!childSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    childSheet.appendRow([militaryId, childName, formattedBirthdate, age, educationLevel, grade, school, result]);
    clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    sendReply(userId, `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£ "${childName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏∏‡∏ï‡∏£: ${e.message}`);
    Logger.log(`Error in handleAddChild: ${e.message}`);
  }
}

function handleEditChild(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const cleanText = text.replace('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£ ', '');
    const parts = cleanText.split('|');

    const childSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    if (!childSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    const data = childSheet.getDataRange().getValues();

    const childFieldMap = {
      "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏∏‡∏ï‡∏£": 1, "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î": 2, "‡∏≠‡∏≤‡∏¢‡∏∏": 3, "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤": 4, "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô": 5, "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤": 6, "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô": 7
    };

    if (parts.length === 3) {
      const [oldChildName, fieldName, newValueRaw] = parts.map(p => p.trim());
      const colIndex = childFieldMap[fieldName];
      if (colIndex === undefined) {
        return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"`);
      }
      let newValue = newValueRaw;
      if (fieldName === "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î") {
        const newDate = parseThaiDateToDateObject(newValueRaw);
        if (!newDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        newValue = formatDateToThaiBuddhist(newDate);
      }
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(oldChildName).trim()) {
          childSheet.getRange(i + 1, colIndex + 1).setValue(newValue);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£ "${oldChildName}" ‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
      } else {
        sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£ "${oldChildName}" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`);
      }
    } else if (parts.length === 8) {
      const [oldName, newName, birthdateStr, age, educationLevel, grade, school, result] = parts.map(p => p.trim());
      const birthdate = parseThaiDateToDateObject(birthdateStr);
      if (!birthdate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const formattedBirthdate = formatDateToThaiBuddhist(birthdate);
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(oldName).trim()) {
          childSheet.getRange(i + 1, 2, 1, 7).setValues([[newName, formattedBirthdate, age, educationLevel, grade, school, result]]);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£ "${oldName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
      } else {
        sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      }
    } else {
      sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå>|<‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà>
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£ <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà>|<‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î(‡∏û.‡∏®.)>|...`);
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏∏‡∏ï‡∏£: ${e.message}`);
    Logger.log(`Error in handleEditChild: ${e.message}`);
  }
}

function handleDeleteChild(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const childName = text.replace('/‡∏•‡∏ö‡∏ö‡∏∏‡∏ï‡∏£ ', '').trim();
    if (!childName) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏•‡∏ö‡∏ö‡∏∏‡∏ï‡∏£ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏∏‡∏ï‡∏£>');

    const childSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    if (!childSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    const data = childSheet.getDataRange().getValues();

    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(childName).trim()) {
        childSheet.deleteRow(i + 1);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
        return sendReply(userId, `‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£ "${childName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }
    sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏∏‡∏ï‡∏£: ${e.message}`);
    Logger.log(`Error in handleDeleteChild: ${e.message}`);
  }
}

function handleViewAllChildren(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const children = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤')
      .slice(1)
      .filter(row => String(row[0]).trim() === String(militaryId).trim());

    if (!children || children.length === 0) {
      return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ');
    }

    let message = 'üë∂ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**\n\n';
    children.forEach((child, index) => {
      message += `${index + 1}. ${child[1]}\n`;
      message += `  üìÖ ‡πÄ‡∏Å‡∏¥‡∏î: ${child[2]} (‡∏≠‡∏≤‡∏¢‡∏∏ ${child[3]} ‡∏õ‡∏µ)\n`;
      message += `  üéì ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${child[4]} ${child[5]}\n`;
      message += `  üè´ ${child[6]}\n`;
      message += `  üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${child[7]}\n\n`;
    });
    sendReply(userId, message);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleViewAllChildren: ${e.message}`);
  }
}

// ====================================================================
// NEW: WIFE MANAGEMENT
// ====================================================================
function handleAddWife(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const parts = text.replace('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤ ', '').split('|');
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 9 ‡∏ü‡∏¥‡∏•‡∏î‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° militaryId)
    if (parts.length !== 9) {
      return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:
/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤>|<‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î(DD/MM/YYYY ‡∏û.‡∏®.)>|<‡∏≠‡∏≤‡∏¢‡∏∏>|<‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä.>|<‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>|<‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î>|<‡∏≠‡∏≤‡∏ä‡∏µ‡∏û>|<‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á>|<‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î>
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤ ‡∏™‡∏°‡∏®‡∏£‡∏µ ‡πÉ‡∏à‡∏î‡∏µ|01/01/2530|37|1234567890123|081-999-8888|A|‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢|‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô|‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
    }

    const [wifeName, birthdateStr, age, nationalId, phone, bloodType, occupation, position, affiliation] = parts.map(p => p.trim());
    const birthdate = parseThaiDateToDateObject(birthdateStr);
    if (!birthdate) {
      return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ DD/MM/YYYY (‡∏û.‡∏®.)');
    }
    const formattedBirthdate = formatDateToThaiBuddhist(birthdate);

    const wifeSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
    if (!wifeSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï appendRow ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
    wifeSheet.appendRow([militaryId, wifeName, formattedBirthdate, age, nationalId, phone, bloodType, occupation, position, affiliation]);
    clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
    sendReply(userId, `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤ "${wifeName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏£‡∏£‡∏¢‡∏≤: ${e.message}`);
    Logger.log(`Error in handleAddWife: ${e.message}`);
  }
}

function handleEditWife(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const cleanText = text.replace('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤ ', '');
    const parts = cleanText.split('|');

    const wifeSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
    if (!wifeSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    const data = wifeSheet.getDataRange().getValues();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field map ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
    const wifeFieldMap = {
      "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•": 1, "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î": 2, "‡∏≠‡∏≤‡∏¢‡∏∏": 3, "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä.": 4, "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£": 5, "‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î": 6, "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û": 7, "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á": 8, "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î": 9
    };

    if (parts.length === 3) { // Partial update (oldWifeName|fieldName|newValue)
      const [oldWifeName, fieldName, newValueRaw] = parts.map(p => p.trim());
      const colIndex = wifeFieldMap[fieldName];
      if (colIndex === undefined) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"`);
      let newValue = newValueRaw;
      if (fieldName === "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î") {
        const newDate = parseThaiDateToDateObject(newValueRaw);
        if (!newDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        newValue = formatDateToThaiBuddhist(newDate);
      }
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(oldWifeName).trim()) {
          wifeSheet.getRange(i + 1, colIndex + 1).setValue(newValue);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤ "${oldWifeName}" ‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
      } else {
        sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤ "${oldWifeName}" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`);
      }
    } else if (parts.length === 10) { // Full update (oldName + 9 new fields)
      const [oldName, newName, birthdateStr, age, nationalId, phone, bloodType, occupation, position, affiliation] = parts.map(p => p.trim());
      const birthdate = parseThaiDateToDateObject(birthdateStr);
      if (!birthdate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const formattedBirthdate = formatDateToThaiBuddhist(birthdate);
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(oldName).trim()) {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï setValues ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà (9 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 2)
          wifeSheet.getRange(i + 1, 2, 1, 9).setValues([[newName, formattedBirthdate, age, nationalId, phone, bloodType, occupation, position, affiliation]]);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤ "${oldName}" ‡πÄ‡∏õ‡πá‡∏ô "${newName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
      } else {
        sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      }
    } else {
      sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå>|<‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà>
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà>|<‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î(‡∏û.‡∏®.)>|<‡∏≠‡∏≤‡∏¢‡∏∏>|<‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä.>|<‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>|<‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î>|<‡∏≠‡∏≤‡∏ä‡∏µ‡∏û>|<‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á>|<‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î>`);
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏£‡∏£‡∏¢‡∏≤: ${e.message}`);
    Logger.log(`Error in handleEditWife: ${e.message}`);
  }
}

function handleDeleteWife(userId, text) {
  try {
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const wifeName = text.replace('/‡∏•‡∏ö‡∏†‡∏£‡∏£‡∏¢‡∏≤ ', '').trim();
    if (!wifeName) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏•‡∏ö‡∏†‡∏£‡∏£‡∏¢‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤>');

    const wifeSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
    if (!wifeSheet) {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
      return;
    }
    const data = wifeSheet.getDataRange().getValues();
    let foundAndDeleted = false;
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === String(militaryId).trim() && String(data[i][1]).trim() === String(wifeName).trim()) {
        wifeSheet.deleteRow(i + 1);
        foundAndDeleted = true;
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
        break;
      }
    }
    if (foundAndDeleted) {
      sendReply(userId, `‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤ "${wifeName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    } else {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏£‡∏£‡∏¢‡∏≤: ${e.message}`);
    Logger.log(`Error in handleDeleteWife: ${e.message}`);
  }
}

function handleViewAllWives(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const wives = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤')
      .slice(1)
      .filter(row => String(row[0]).trim() === String(militaryId).trim());

    if (!wives || wives.length === 0) {
      return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ');
    }

    let message = 'üë©‚Äç‚ù§Ô∏è‚Äçüë® **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**\n\n';
    wives.forEach((wife, index) => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
      message += `${index + 1}. ${wife[1]}\n`;
      message += `  üìÖ ‡πÄ‡∏Å‡∏¥‡∏î: ${wife[2]} (‡∏≠‡∏≤‡∏¢‡∏∏ ${wife[3]} ‡∏õ‡∏µ)\n`;
      message += `  üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä.: ${wife[4]}\n`;
      message += `  ‚òéÔ∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${wife[5]}\n`;
      message += `  ü©∏ ‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î: ${wife[6]}\n`;
      message += `  üíº ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${wife[7]}\n`;
      message += `  üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${wife[8]}\n`;
      message += `  üè¢ ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î: ${wife[9]}\n\n`;
    });
    sendReply(userId, message);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleViewAllWives: ${e.message}`);
  }
}

function handleCommandWifeInfo(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const wives = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤')
      .slice(1)
      .filter(row => String(row[0]).trim() === String(militaryId).trim());

    if (!wives || wives.length === 0) {
      return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ');
    }

    wives.forEach(wife => {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
      sendFlexWifeInfo(userId, wife[1], wife[2], wife[3], wife[4], wife[5], wife[6], wife[7], wife[8], wife[9]);
    });
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleCommandWifeInfo: ${e.message}`);
  }
}

function sendFlexWifeInfo(userId, name, birthdate, age, nationalId, phone, bloodType, occupation, position, affiliation) {
  const flex = {
    type: "bubble",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        { type: "text", text: "üë©‚Äç‚ù§Ô∏è‚Äçüë® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤", weight: "bold", color: "#FF69B4", size: "lg", align: "center" },
        { type: "separator", margin: "md" },
        { type: "text", text: `‡∏ä‡∏∑‡πà‡∏≠: ${name}`, size: "md", wrap: true },
        { type: "text", text: `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${birthdate}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ`, size: "sm", color: "#666666" },
        { type: "text", text: `‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ ‡∏õ‡∏ä‡∏ä.: ${nationalId}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${phone}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î: ${bloodType}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏≠‡∏≤‡∏ä‡∏µ‡∏û: ${occupation}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${position}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î: ${affiliation}`, size: "sm", color: "#666666" }
      ]
    }
  };
  sendFlex(userId, flex);
}


function parseThaiDateToDateObject(dateString) {
  try {
    const parts = dateString.split('/');
    if (parts.length !== 3) return null;
    let day = parseInt(parts[0], 10);
    let month = parseInt(parts[1], 10);
    let year = parseInt(parts[2], 10);
    if (year > 2500) year -= 543;
    const date = new Date(year, month - 1, day);
    if (date.getDate() !== day || date.getMonth() + 1 !== month || date.getFullYear() !== year) return null;
    return date;
  } catch (e) {
    Logger.log(`Error parsing date: ${dateString}, ${e.message}`);
    return null;
  }
}

function formatDateToThaiBuddhist(dateObject) {
  if (!(dateObject instanceof Date) || isNaN(dateObject)) return 'N/A';
  const day = String(dateObject.getDate()).padStart(2, '0');
  const month = String(dateObject.getMonth() + 1).padStart(2, '0');
  const yearBE = dateObject.getFullYear() + 543;
  return `${day}/${month}/${yearBE}`;
}

function handleAddDuty(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    const parts = text.replace('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏£ ', '').split('|');
    if (parts.length !== 7) return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏£ <‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(DD/MM/YYYY ‡∏û.‡∏®.)>|<‡∏¢‡∏®>|<‡∏ä‡∏∑‡πà‡∏≠>|<‡∏™‡∏Å‡∏∏‡∏•>|<‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà>|<‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢>|<‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>`);

    const [dateStr, rank, firstName, lastName, duty, company, phone] = parts.map(p => p.trim());
    const dutyDate = parseThaiDateToDateObject(dateStr);
    if (!dutyDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ DD/MM/YYYY (‡∏û.‡∏®.)');
    const formattedDate = formatDateToThaiBuddhist(dutyDate);
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    if (!dutySheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°"');
    dutySheet.appendRow([formattedDate, rank, firstName, lastName, duty, company, phone]);
    clearCache('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    sendReply(userId, `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏° "${rank} ${firstName} ${lastName}" ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏£: ${e.message}`);
    Logger.log(`Error in handleAddDuty: ${e.message}`);
  }
}

function handleEditDuty(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    const cleanText = text.replace('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£ ', '');
    const parts = cleanText.split('|');
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    if (!dutySheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°"');
    const data = dutySheet.getDataRange().getValues();
    const dutyFieldMap = { "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": 0, "‡∏¢‡∏®": 1, "‡∏ä‡∏∑‡πà‡∏≠": 2, "‡∏™‡∏Å‡∏∏‡∏•": 3, "‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà": 4, "‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢": 5, "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£": 6 };

    if (parts.length === 5) { // Partial Update
      const [oldDateStr, oldFirstName, oldLastName, fieldName, newValueRaw] = parts.map(p => p.trim());
      const oldDutyDate = parseThaiDateToDateObject(oldDateStr);
      if (!oldDutyDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const formattedOldDate = formatDateToThaiBuddhist(oldDutyDate);
      const colIndex = dutyFieldMap[fieldName];
      if (colIndex === undefined) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"`);
      let newValue = (fieldName === "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà") ? (parseThaiDateToDateObject(newValueRaw) ? formatDateToThaiBuddhist(parseThaiDateToDateObject(newValueRaw)) : null) : newValueRaw;
      if (fieldName === "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" && !newValue) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === formattedOldDate && String(data[i][2]).trim() === oldFirstName && String(data[i][3]).trim() === oldLastName) {
          dutySheet.getRange(i + 1, colIndex + 1).setValue(newValue);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${oldFirstName} ${oldLastName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedOldDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
      } else {
        sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${oldFirstName} ${oldLastName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedOldDate}`);
      }
    } else if (parts.length === 10) { // Full Update
      const [oldDateStr, oldFirstName, oldLastName, newDateStr, newRank, newFirstName, newLastName, newDuty, newCompany, newPhone] = parts.map(p => p.trim());
      const oldDutyDate = parseThaiDateToDateObject(oldDateStr);
      if (!oldDutyDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const formattedOldDate = formatDateToThaiBuddhist(oldDutyDate);
      const newDutyDate = parseThaiDateToDateObject(newDateStr);
      if (!newDutyDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const formattedNewDate = formatDateToThaiBuddhist(newDutyDate);
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][0]).trim() === formattedOldDate && String(data[i][2]).trim() === oldFirstName && String(data[i][3]).trim() === oldLastName) {
          const newData = [formattedNewDate, newRank, newFirstName, newLastName, newDuty, newCompany, newPhone];
          dutySheet.getRange(i + 1, 1, 1, newData.length).setValues([newData]);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${oldFirstName} ${oldLastName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedOldDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
      } else {
        sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      }
    } else {
      sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£ <‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°>|<‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå>|<‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà>
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£ <‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°>|<‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏î‡∏¥‡∏°>|<‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà>|<‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà>|...`);
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏£: ${e.message}`);
    Logger.log(`Error in handleEditDuty: ${e.message}`);
  }
}

function handleDeleteDuty(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    const parts = text.replace('/‡∏•‡∏ö‡πÄ‡∏ß‡∏£ ', '').split('|');
    if (parts.length !== 3) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏•‡∏ö‡πÄ‡∏ß‡∏£ <‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(DD/MM/YYYY ‡∏û.‡∏®.)>|<‡∏ä‡∏∑‡πà‡∏≠>|<‡∏™‡∏Å‡∏∏‡∏•>');
    const [dateStr, firstName, lastName] = parts.map(p => p.trim());
    const dutyDate = parseThaiDateToDateObject(dateStr);
    if (!dutyDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    const formattedDate = formatDateToThaiBuddhist(dutyDate);
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    if (!dutySheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°"');
    const data = dutySheet.getDataRange().getValues();
    let foundAndDeleted = false;
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][0]).trim() === formattedDate && String(data[i][2]).trim() === firstName && String(data[i][3]).trim() === lastName) {
        dutySheet.deleteRow(i + 1);
        foundAndDeleted = true;
        break;
      }
    }
    if (foundAndDeleted) {
      sendReply(userId, `‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏° "${firstName} ${lastName}" ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      clearCache('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    } else {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ß‡∏£: ${e.message}`);
    Logger.log(`Error in handleDeleteDuty: ${e.message}`);
  }
}

function handleViewAllDuties(e) {
  try {
    const userId = e.source.userId;
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    const duties = getSpreadsheetData('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°').slice(1);
    if (!duties || duties.length === 0) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    let message = 'üõ°Ô∏è **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**\n\n';
    duties.slice(0, 20).forEach((duty, index) => {
      message += `${index + 1}. ${duty[0]} - ${duty[1]} ${duty[2]} ${duty[3]}\n`;
      message += `  üìç ${duty[4]} | ${duty[5]} | ‚òéÔ∏è ${duty[6]}\n\n`;
    });
    if (duties.length > 20) message += `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${duties.length - 20} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    sendReply(userId, message);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleViewAllDuties: ${e.message}`);
  }
}

function handleAddPersonnel(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const parts = text.replace('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ', '').split('|');
    if (parts.length !== 18) {
      return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 18 ‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• <‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢>|<‡∏¢‡∏®>|<‡∏ä‡∏∑‡πà‡∏≠>|<‡∏™‡∏Å‡∏∏‡∏•>|...`);
    }

    const [company, rank, firstName, lastName, nationalId, militaryId, affiliation, position, branch, origin, birthdateStr, age, registrationDateStr, appointmentDateStr, rankAcquisitionDateStr, salary, retirementYear, imageUrl] = parts.map(p => p.trim());
    const birthdate = parseThaiDateToDateObject(birthdateStr);
    const registrationDate = parseThaiDateToDateObject(registrationDateStr);
    const appointmentDate = parseThaiDateToDateObject(appointmentDateStr);
    const rankAcquisitionDate = parseThaiDateToDateObject(rankAcquisitionDateStr);

    if (!birthdate || !registrationDate || !appointmentDate || !rankAcquisitionDate) {
      return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ DD/MM/YYYY (‡∏û.‡∏®.)');
    }

    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    if (!personnelSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•"');
    personnelSheet.appendRow([company, rank, firstName, lastName, nationalId, militaryId, affiliation, position, branch, origin, formatDateToThaiBuddhist(birthdate), age, formatDateToThaiBuddhist(registrationDate), formatDateToThaiBuddhist(appointmentDate), formatDateToThaiBuddhist(rankAcquisitionDate), salary, retirementYear, imageUrl]);
    clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    sendReply(userId, `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• "${rank} ${firstName} ${lastName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•: ${e.message}`);
    Logger.log(`Error in handleAddPersonnel: ${e.message}`);
  }
}

function handleEditPersonnel(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const cleanText = text.replace('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ', '');
    const parts = cleanText.split('|');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    if (!personnelSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•"');
    const data = personnelSheet.getDataRange().getValues();
    const personnelFieldMap = { "‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢": 0, "‡∏¢‡∏®": 1, "‡∏ä‡∏∑‡πà‡∏≠": 2, "‡∏™‡∏Å‡∏∏‡∏•": 3, "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô": 4, "‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£": 5, "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î": 6, "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á": 7, "‡πÄ‡∏´‡∏•‡πà‡∏≤": 8, "‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î": 9, "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î": 10, "‡∏≠‡∏≤‡∏¢‡∏∏": 11, "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô": 12, "‡∏ß‡∏±‡∏ô‡∏ö‡∏£‡∏£‡∏à‡∏∏": 13, "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏≠‡∏á‡∏¢‡∏®": 14, "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": 15, "‡∏õ‡∏µ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì": 16, "URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û": 17 };

    if (parts.length === 3) { // Partial Update
      const [militaryId, fieldName, newValueRaw] = parts.map(p => p.trim());
      const colIndex = personnelFieldMap[fieldName];
      if (colIndex === undefined) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"`);
      let newValue = newValueRaw;
      if (["‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", "‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "‡∏ß‡∏±‡∏ô‡∏ö‡∏£‡∏£‡∏à‡∏∏", "‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏≠‡∏á‡∏¢‡∏®"].includes(fieldName)) {
        const newDate = parseThaiDateToDateObject(newValueRaw);
        if (!newDate) return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${fieldName}"`);
        newValue = formatDateToThaiBuddhist(newDate);
      }
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][5]).trim() === String(militaryId).trim()) {
          personnelSheet.getRange(i + 1, colIndex + 1).setValue(newValue);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${militaryId}" ‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
      } else {
        sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${militaryId}"`);
      }
    } else if (parts.length === 19) { // Full Update
      const oldMilitaryId = parts[0].trim();
      const newDataRaw = parts.slice(1).map(p => p.trim());
      const dateFieldsRelativeIndices = [10, 12, 13, 14];
      const formattedNewData = [...newDataRaw];
      for (const index of dateFieldsRelativeIndices) {
        const dateObject = parseThaiDateToDateObject(formattedNewData[index]);
        if (!dateObject) return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà`);
        formattedNewData[index] = formatDateToThaiBuddhist(dateObject);
      }
      let foundAndEdited = false;
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][5]).trim() === String(oldMilitaryId).trim()) {
          personnelSheet.getRange(i + 1, 1, 1, formattedNewData.length).setValues([formattedNewData]);
          foundAndEdited = true;
          break;
        }
      }
      if (foundAndEdited) {
        sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${oldMilitaryId}" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
      } else {
        sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      }
    } else {
      sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• <‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£>|<‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå>|<‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà>
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• <‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°>|<‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢>|<‡∏¢‡∏®>|...`);
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•: ${e.message}`);
    Logger.log(`Error in handleEditPersonnel: ${e.message}`);
  }
}

function handleDeletePersonnel(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const militaryIdToDelete = text.replace('/‡∏•‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ', '').trim();
    if (!militaryIdToDelete) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏•‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• <‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£>');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    if (!personnelSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•"');
    const data = personnelSheet.getDataRange().getValues();
    let foundAndDeleted = false;
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][5]).trim() === String(militaryIdToDelete).trim()) {
        personnelSheet.deleteRow(i + 1);
        foundAndDeleted = true;
        break;
      }
    }
    if (foundAndDeleted) {
      sendReply(userId, `‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${militaryIdToDelete}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    } else {
      sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•: ${e.message}`);
    Logger.log(`Error in handleDeletePersonnel: ${e.message}`);
  }
}

function handleViewAllPersonnel(e) {
  try {
    const userId = e.source.userId;
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    const personnel = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•').slice(1);
    if (!personnel || personnel.length === 0) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    let message = 'üë• **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**\n\n';
    personnel.slice(0, 15).forEach((person, index) => {
      message += `${index + 1}. ${person[1]} ${person[2]} ${person[3]}\n`;
      message += `  üÜî ${person[5]} | ${person[0]} | ${person[7]}\n`;
      message += `  üìÖ ‡∏≠‡∏≤‡∏¢‡∏∏ ${person[11]} ‡∏õ‡∏µ | ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì ${person[16]}\n\n`;
    });
    if (personnel.length > 15) message += `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${personnel.length - 15} ‡∏Ñ‡∏ô`;
    sendReply(userId, message);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleViewAllPersonnel: ${e.message}`);
  }
}

// üìã ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• (‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
function handleSearchPersonnel(userId, text) {
¬† try {
¬† ¬† // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
¬† ¬† // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
¬† ¬† // if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');

¬† ¬† const keyword = text.replace('/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ', '').trim().toLowerCase();
¬† ¬† if (!keyword) {
¬† ¬† ¬† return sendReply(userId, '‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠, ‡∏™‡∏Å‡∏∏‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ‡∏™‡∏°‡∏ä‡∏≤‡∏¢');
¬† ¬† }

¬† ¬† const personnelData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
¬† ¬† if (!personnelData || personnelData.length <= 1) {
¬† ¬† ¬† return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
¬† ¬† }

¬† ¬† const results = personnelData.slice(1).filter(person => {
¬† ¬† ¬† // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å ‡∏¢‡∏®, ‡∏ä‡∏∑‡πà‡∏≠, ‡∏™‡∏Å‡∏∏‡∏•, ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£
¬† ¬† ¬† const searchableText = `${person[1] || ''} ${person[2] || ''} ${person[3] || ''} ${person[5] || ''}`.toLowerCase();
¬† ¬† ¬† return searchableText.includes(keyword);
¬† ¬† });

¬† ¬† if (results.length === 0) {
¬† ¬† ¬† return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${keyword}"`);
¬† ¬† }

¬† ¬† let message = `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ${results.length} ‡∏ô‡∏≤‡∏¢:\n\n`;
¬† ¬† // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
¬† ¬† results.slice(0, 10).forEach((person, index) => {
¬† ¬† ¬† message += `${index + 1}. ${person[1] || ''} ${person[2] || ''} ${person[3] || ''}\n`;
¬† ¬† ¬† message += `¬†  - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${person[7] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`;
      message += `¬†  - ‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£: ${person[5] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`;
      message += `¬†  - ‡πÄ‡∏•‡∏Ç ‡∏õ‡∏ä‡∏ä.: ${person[4] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`;
      message += `¬†  - ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${person[10] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`;
      message += `¬†  - ‡∏≠‡∏≤‡∏¢‡∏∏: ${person[11] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n`;
¬† ¬† ¬† message += `¬†  - ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${person[15] || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\n\n`;
¬† ¬† });

¬† ¬† if (results.length > 10) {
¬† ¬† ¬† message += `... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${results.length - 10} ‡∏Ñ‡∏ô`;
¬† ¬† }

¬† ¬† sendReply(userId, message);

¬† } catch (e) {
¬† ¬† sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•: ${e.message}`);
¬† ¬† Logger.log(`Error in handleSearchPersonnel: ${e.message}`);
¬† }
}

function handleCommandChildInfo(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const children = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤')
      .slice(1)
      .filter(row => String(row[0]).trim() === String(militaryId).trim());
    if (!children || children.length === 0) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ');
    children.forEach(child => sendFlexChildInfo(userId, child[1], child[2], child[3], child[4], child[5], child[6], child[7]));
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleCommandChildInfo: ${e.message}`);
  }
}

function sendFlexChildInfo(userId, name, birthdate, age, educationLevel, grade, school, result) {
  const flex = {
    type: "bubble",
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        { type: "text", text: "üë∂ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£", weight: "bold", color: "#007bff", size: "lg", align: "center" },
        { type: "separator", margin: "md" },
        { type: "text", text: `‡∏ä‡∏∑‡πà‡∏≠: ${name}`, size: "md", wrap: true },
        { type: "text", text: `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${birthdate}`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ`, size: "sm", color: "#666666" },
        { type: "text", text: `‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${educationLevel}`, size: "sm", color: "#666666", wrap: true },
        { type: "text", text: `‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô: ${grade}`, size: "sm", color: "#666666", wrap: true },
        { type: "text", text: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${school}`, size: "sm", color: "#666666", wrap: true },
        { type: "text", text: `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${result}`, size: "sm", color: "#666666" }
      ]
    }
  };
  sendFlex(userId, flex);
}

function handleCommandPersonnelInfo(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) {
      return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
    }

    const pData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•').slice(1);
    
    let foundPersonnel = false;
    for (let i = 0; i < pData.length; i++) {
      const data = pData[i];
      if (String(data[5]).trim() === String(militaryId).trim()) {
        foundPersonnel = true;

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 17 (R) ‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 18 (S)
        const linkFromR = data[17] ? String(data[17]).trim() : '';
        const linkFromS = data[18] ? String(data[18]).trim() : '';
        let imageUrl = 'https://img5.pic.in.th/file/secure-sv1/-199a79ca217285bdf.jpg'; // ‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏£‡∏≠‡∏á

        if (linkFromR.includes('/d/')) {
          const match = linkFromR.match(/\/d\/([a-zA-Z0-9_-]+)\//);
          if (match && match[1]) {
            imageUrl = `https://drive.google.com/uc?export=view&id=${match[1]}`;
          }
        } else if (linkFromS.startsWith('http')) {
          imageUrl = linkFromS;
        }

        const flex = {
          type: "bubble",
          size: "giga",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "image",
                url: imageUrl,
                size: "full",
                aspectMode: "cover",
                aspectRatio: "1:1",
                gravity: "center"
              },
              {
                type: "box",
                layout: "vertical",
                spacing: "sm",
                paddingAll: "lg",
                contents: [
                  {
                    type: "text",
                    text: "ü™ñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•",
                    weight: "bold",
                    color: "#1DB446",
                    size: "lg",
                    align: "center"
                  },
                  {
                    type: "separator",
                    margin: "md"
                  },
                  {
                    type: "text",
                    text: `${data[1] || ''} ${data[2] || ''} ${data[3] || ''}`,
                    weight: "bold",
                    size: "lg",
                    align: "center",
                    margin: "md",
                    wrap: true
                  },
                  {
                    type: "box",
                    layout: "vertical",
                    margin: "md",
                    spacing: "xs",
                    contents: [
                      { type: "text", text: `üìå ‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢ : ${data[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üÜî ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡∏õ‡∏ä‡∏ä. : ${data[4] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `ü™ñ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ : ${data[5] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üìç ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î : ${data[6] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üéñÔ∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á : ${data[7] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üî∞ ‡πÄ‡∏´‡∏•‡πà‡∏≤ : ${data[8] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üè† ‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î : ${data[9] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î : ${data[10] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `‚è≥ ‡∏≠‡∏≤‡∏¢‡∏∏ : ${data[11] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏õ‡∏µ`, size: "sm", wrap: true },
                      { type: "text", text: `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô : ${data[12] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏à‡∏∏ : ${data[13] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏á‡∏¢‡∏® : ${data[14] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô : ${data[15] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true },
                      { type: "text", text: `üìÜ ‡∏õ‡∏µ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì : ${data[16] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`, size: "sm", wrap: true }
                    ]
                  }
                ]
              }
            ]
          },
          styles: {
            body: {
              separator: true
            }
          }
        };

        sendFlex(userId, flex);
        return;
      }
    }

    if (!foundPersonnel) {
      sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
    }
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleCommandPersonnelInfo: ${e.message}`);
  }
}

function createKeyValueBox(key, value) {
  return {
    type: "box",
    layout: "horizontal",
    contents: [
      { type: "text", text: key, size: "sm", color: "#555555", flex: 3 },
      { type: "text", text: value, size: "sm", color: "#111111", wrap: true, flex: 7, align: "end" }
    ]
  };
}

function handleCommandDutyToday(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const personnel = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•').slice(1).find(row => String(row[5]).trim() === String(militaryId).trim());
    if (!personnel) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const name = personnel[2];

    const today = new Date();
    const formattedToday = formatDateToThaiBuddhist(today);
    const duties = getSpreadsheetData('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°').slice(1);
    const foundDuty = duties.find(row => row[0] && row[2] && String(row[0]).trim() === formattedToday && String(row[2]).trim() === name);

    if (foundDuty) {
      const fullName = `${foundDuty[1]} ${foundDuty[2]} ${foundDuty[3]}`;
      const duty = foundDuty[4] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà';
      const company = foundDuty[5] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢';
      const phone = foundDuty[6] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£';
      sendFlexDutyReminder(userId, fullName, duty, company, phone);
    } else {
      sendReply(userId, '‚úÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    }
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleCommandDutyToday: ${e.message}`);
  }
}

function sendFlexDutyReminder(userId, fullName, duty, company, phone) {
  const flex = {
    type: "bubble",
    header: {
      type: "box", layout: "vertical", contents: [{ type: "text", text: "‚è∞ ‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", weight: "bold", color: "#ffffff", size: "lg", align: "center" }],
      backgroundColor: "#FF5722", paddingAll: "md"
    },
    body: {
      type: "box", layout: "vertical", spacing: "md", contents: [
        { type: "text", text: `üë§ ${fullName}`, weight: "bold", size: "md", align: "center" },
        { type: "separator", margin: "md" },
        createKeyValueBox("‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", duty),
        createKeyValueBox("‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢", company),
        createKeyValueBox("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", phone)
      ]
    }
  };
  sendFlex(userId, flex);
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
 * @param {object} e - Event object ‡∏à‡∏≤‡∏Å LINE
 */
function handleMonthlyDuty(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const personnel = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•').slice(1).find(row => String(row[5]).trim() === String(militaryId).trim());
    if (!personnel) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const name = personnel[2];

    const today = new Date();
    const currentMonth = today.getMonth() + 1; // getMonth() returns 0-11, so add 1 for 1-12
    const currentYear = today.getFullYear();
    const duties = getSpreadsheetData('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°').slice(1);
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const monthlyDuties = duties.filter(row => {
      if (!row[0] || !row[2]) return false;
      const dutyDate = parseThaiDateToDateObject(String(row[0]).trim()); // Parse B.E. string to Date object
      if (!dutyDate) {
        Logger.log(`Skipping row due to invalid date format: ${row[0]}`);
        return false;
      }
      return dutyDate.getMonth() + 1 === currentMonth && 
             dutyDate.getFullYear() === currentYear && 
             String(row[2]).trim() === name;
    }).map(row => ({
      date: String(row[0]), 
      rank: row[1] || '', 
      position: row[4] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', 
      company: row[5] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢', 
      phone: row[6] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'
    }));

    if (monthlyDuties.length === 0) {
      return sendReply(userId, 'üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°');
    }

    const monthNames = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                        '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'];

    const flex = {
      type: 'bubble', size: 'mega',
      header: { type: 'box', layout: 'vertical', contents: [{ type: 'text', text: `üìÖ ‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô${monthNames[currentMonth - 1]}`, weight: 'bold', color: '#ffffff', size: 'lg' }], backgroundColor: '#FF9800' },
      body: {
        type: 'box', layout: 'vertical', spacing: 'md', contents: [
          { type: 'text', text: `üë§ ${monthlyDuties[0].rank} ${name}`, weight: 'bold', size: 'md' },
          { type: 'separator', margin: 'md' },
          ...monthlyDuties.map(duty => ({
            type: 'box', layout: 'vertical', margin: 'sm', contents: [
              { type: 'text', text: `üìÖ ${duty.date}`, size: 'sm', weight: 'bold' },
              { type: 'text', text: `üìç ${duty.position}`, size: 'xs', color: '#666666' },
              { type: 'text', text: `üè¢ ${duty.company}`, size: 'xs', color: '#666666' },
              { type: 'text', text: `‚òéÔ∏è ${duty.phone}`, size: 'xs', color: '#666666' }
            ]
          }))
        ]
      }
    };
    sendFlex(userId, flex);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleMonthlyDuty: ${e.message}`);
  }
}

function handlePastDuties(e) {
  try {
    const userId = e.source.userId;
    const militaryId = getUserMilitaryId(userId);
    if (!militaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const personnel = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•').slice(1).find(row => String(row[5]).trim() === String(militaryId).trim());
    if (!personnel) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const name = personnel[2];

    const today = new Date();
    const duties = getSpreadsheetData('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°').slice(1);
    const pastDuties = duties.filter(row => {
      const dutyDate = parseThaiDateToDateObject(String(row[0]).trim());
      return dutyDate && dutyDate < today && String(row[2]).trim() === name;
    }).map(row => ({
      date: String(row[0]), position: row[4] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', company: row[5] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢', phone: row[6] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', sortDate: parseThaiDateToDateObject(String(row[0]))
    }));

    pastDuties.sort((a, b) => b.sortDate - a.sortDate);
    const recentDuties = pastDuties.slice(0, 10);

    if (recentDuties.length === 0) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á');

    const flex = {
      type: 'bubble', size: 'mega',
      header: { type: 'box', layout: 'vertical', contents: [{ type: 'text', text: 'üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á', weight: 'bold', color: '#ffffff', size: 'lg' }], backgroundColor: '#9C27B0' },
      body: {
        type: 'box', layout: 'vertical', spacing: 'sm', contents: [
          { type: 'text', text: `üë§ ${name}`, weight: 'bold', size: 'md' },
          { type: 'separator', margin: 'md' },
          ...recentDuties.map(duty => ({
            type: 'box', layout: 'vertical', margin: 'xs', contents: [
              { type: 'text', text: `üìÖ ${duty.date} - ${duty.position}`, size: 'sm' },
              { type: 'text', text: `üè¢ ${duty.company}`, size: 'xs', color: '#666666' }
            ]
          }))
        ]
      }
    };
    sendFlex(userId, flex);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handlePastDuties: ${e.message}`);
  }
}

function handleCompanyChildrenReport(e) {
  try {
    const userId = e.source.userId;
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ');
    const childData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    const personnelData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    if (!childData || !personnelData || childData.length <= 1 || personnelData.length <= 1) {
      return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
    }
    const children = childData.slice(1);
    const personnel = personnelData.slice(1);

    let report = 'üìä **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢**\n\n';
    let totalChildren = 0;
    let schoolAgeChildren = 0;
    const childrenByMilitaryId = children.reduce((acc, child) => {
      if (child[0]) {
        const militaryId = String(child[0]).trim();
        if (!acc[militaryId]) acc[militaryId] = [];
        acc[militaryId].push(child);
      }
      return acc;
    }, {});

    personnel.forEach(person => {
      if (person[5]) {
        const militaryId = String(person[5]).trim();
        const childrenOfThisPersonnel = childrenByMilitaryId[militaryId] || [];
        report += `**${person[1] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ${person[2] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ${person[3] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (${person[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'})**\n`;
        if (childrenOfThisPersonnel.length > 0) {
          childrenOfThisPersonnel.forEach((child, index) => {
            const childAge = parseInt(child[3], 10) || 0;
            report += `  ${index + 1}. ${child[1] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (‡∏≠‡∏≤‡∏¢‡∏∏ ${childAge} ‡∏õ‡∏µ)\n`;
            report += `    ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${child[4] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}, ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${child[6] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}\n`;
            totalChildren++;
            if (childAge >= 6 && childAge <= 18) schoolAgeChildren++;
          });
        } else {
          report += `  - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£\n`;
        }
        report += '\n';
      }
    });
    report += `---
**‡∏™‡∏£‡∏∏‡∏õ:**
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏∏‡∏ï‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalChildren} ‡∏Ñ‡∏ô
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏∏‡∏ï‡∏£‡∏ß‡∏±‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (6-18 ‡∏õ‡∏µ): ${schoolAgeChildren} ‡∏Ñ‡∏ô`;
    sendReply(userId, report);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleCompanyChildrenReport: ${e.message}`);
  }
}

function handleGenerateReport(e) {
  try {
    const userId = e.source.userId;
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ');

    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    const childSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏ï‡∏£-‡∏ò‡∏¥‡∏î‡∏≤');
    const wifeSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏£‡∏£‡∏¢‡∏≤');
    const dutySheet = SpreadsheetApp.getActive().getSheetByName('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');

    const totalPersonnel = personnelSheet ? personnelSheet.getLastRow() - 1 : 0;
    const totalChildren = childSheet ? childSheet.getLastRow() - 1 : 0;
    const totalWives = wifeSheet ? wifeSheet.getLastRow() - 1 : 0;
    const totalDuties = dutySheet ? dutySheet.getLastRow() - 1 : 0;
    const totalCommands = commandSheet ? commandSheet.getLastRow() - 1 : 0;

    let report = `üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**\n\n`;
    report += `üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalPersonnel} ‡∏ô‡∏≤‡∏¢\n`;
    report += `üë©‚Äç‚ù§Ô∏è‚Äçüë® ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalWives} ‡∏Ñ‡∏ô\n`;
    report += `üë∂ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏∏‡∏ï‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalChildren} ‡∏Ñ‡∏ô\n`;
    report += `üõ°Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${totalDuties} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
    report += `üìú ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${totalCommands} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;
    report += `(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô)`;

    sendReply(userId, report);
  } catch (e) {
    sendReply(e.source.userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleGenerateReport: ${e.message}`);
  }
}


function getUserMilitaryId(userId) {
  const loginData = getSpreadsheetData('LOGIN');
  if (!loginData) return null;
  for (let i = 1; i < loginData.length; i++) {
    if (loginData[i][0] === userId) return String(loginData[i][1]).trim();
  }
  return null;
}

function getMilitaryIdByPersonnelName(rank, firstName, lastName) {
  const pData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
  if (!pData) return null;
  for (let i = 1; i < pData.length; i++) {
    if (String(pData[i][1]).trim() === String(rank).trim() && String(pData[i][2]).trim() === String(firstName).trim() && String(pData[i][3]).trim() === String(lastName).trim()) {
      return String(pData[i][5]).trim();
    }
  }
  return null;
}

function checkAdminPermission(userId) {
  try {
    const adminData = getSpreadsheetData('ADMIN');
    if (!adminData) {
      Logger.log('Error: Sheet named "ADMIN" not found.');
      return false;
    }
    const adminUserIds = adminData.slice(1).map(row => String(row[0]).trim());
    return adminUserIds.includes(String(userId).trim());
  } catch (e) {
    Logger.log(`Error checking admin permission: ${e.message}`);
    return false;
  }
}

function createDailyDutyReminderTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() === 'sendDailyDutyReminder') {
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  ScriptApp.newTrigger('sendDailyDutyReminder')
    .timeBased()
    .everyDays(1)
    .atHour(7)
    .nearMinute(30)
    .inTimezone('Asia/Bangkok')
    .create();
  Logger.log('Daily duty reminder trigger created successfully.');
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏£‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢ Trigger)
 */
function sendDailyDutyReminder() {
  try {
    const ddata = getSpreadsheetData('‡πÄ‡∏ß‡∏£ - ‡∏¢‡∏≤‡∏°');
    const today = new Date();
    const formattedToday = formatDateToThaiBuddhist(today);
    const loginData = getSpreadsheetData('LOGIN');
    const pData = getSpreadsheetData('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');

    if (!ddata || !loginData || !pData) {
      Logger.log('Required sheets are missing or empty. Skipping daily reminder.');
      return;
    }

    const militaryIdToUserId = loginData.slice(1).reduce((acc, row) => {
      if (row[0] && row[1]) {
        acc[String(row[1]).trim()] = String(row[0]).trim();
      }
      return acc;
    }, {});

    ddata.slice(1).forEach(row => {
      // Columns: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(0), ‡∏¢‡∏®(1), ‡∏ä‡∏∑‡πà‡∏≠(2), ‡∏™‡∏Å‡∏∏‡∏•(3), ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà(4), ‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢(5), ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£(6)
      if (row[0] && row[2]) {
        const dutyDateStr = String(row[0]).trim();
        if (dutyDateStr === formattedToday) {
          const [rank, firstName, lastName, duty, company, phone] = [row[1], row[2], row[3], row[4], row[5], row[6]];
          
          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ militaryId ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•
          const personnelEntry = pData.slice(1).find(pRow => 
            String(pRow[2]).trim() === String(firstName).trim() && 
            String(pRow[3]).trim() === String(lastName).trim()
          );

          if (personnelEntry && personnelEntry[5]) {
            const militaryIdFound = String(personnelEntry[5]).trim();
            if (militaryIdToUserId[militaryIdFound]) {
              const targetUserId = militaryIdToUserId[militaryIdFound];
              sendFlexDutyReminder(targetUserId, `${rank} ${firstName} ${lastName}`, duty, company, phone);
              Logger.log(`Sent daily duty reminder to user for ${firstName} ${lastName} (Military ID: ${militaryIdFound})`);
            } else {
              Logger.log(`No LINE User ID found in LOGIN sheet for Military ID: ${militaryIdFound}`);
            }
          } else {
            Logger.log(`No matching personnel found in '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•' sheet for: ${firstName} ${lastName}`);
          }
        }
      }
    });
  } catch (e) {
    Logger.log(`Error in sendDailyDutyReminder: ${e.message}, Stack: ${e.stack}`);
  }
}

function handleAddCommand(userId, text) {
  try {
    const currentUserMilitaryId = getUserMilitaryId(userId);
    if (!currentUserMilitaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const parts = text.replace('/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ', '').split('|');
    if (parts.length !== 7) return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏¢‡∏®>|<‡∏ä‡∏∑‡πà‡∏≠>|<‡∏™‡∏Å‡∏∏‡∏•>|<‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>|<‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(‡∏û.‡∏®.)>|<‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå>`);
    const [rank, firstName, lastName, commandList, commandNumber, dateStr, fileLink] = parts.map(p => p.trim());
    const namedPersonMilitaryId = getMilitaryIdByPersonnelName(rank, firstName, lastName);
    if (!namedPersonMilitaryId || String(currentUserMilitaryId).trim() !== String(namedPersonMilitaryId).trim()) {
      return sendReply(userId, `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ`);
    }
    const commandDate = parseThaiDateToDateObject(dateStr);
    if (!commandDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    const formattedDate = formatDateToThaiBuddhist(commandDate);
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const data = getSpreadsheetData('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    const isDuplicate = data.slice(1).some(row => String(row[4]).trim() === String(commandNumber).trim() && String(row[5]).trim() === formattedDate);
    if (isDuplicate) return sendReply(userId, `‚ùå ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${commandNumber} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
    commandSheet.appendRow([rank, firstName, lastName, commandList, commandNumber, formattedDate, fileLink]);
    clearCache('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    sendReply(userId, `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "${commandList}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleAddCommand: ${e.message}`);
  }
}

function handleEditCommand(userId, text) {
  try {
    const currentUserMilitaryId = getUserMilitaryId(userId);
    if (!currentUserMilitaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const cleanText = text.replace('/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ', '');
    const parts = cleanText.split('|');
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const data = commandSheet.getDataRange().getValues();
    const commandFieldMap = { "‡∏¢‡∏®": 0, "‡∏ä‡∏∑‡πà‡∏≠": 1, "‡∏™‡∏Å‡∏∏‡∏•": 2, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á": 3, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà": 4, "‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": 5, "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á": 6 };

    if (parts.length === 4) { // Partial Update
      const [oldCommandNumber, oldDateStr, fieldName, newValueRaw] = parts.map(p => p.trim());
      const formattedOldDate = parseThaiDateToDateObject(oldDateStr) ? formatDateToThaiBuddhist(parseThaiDateToDateObject(oldDateStr)) : null;
      if (!formattedOldDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      const colIndex = commandFieldMap[fieldName];
      if (colIndex === undefined) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"`);
      let foundRowIndex = -1, existingRank = '', existingFirstName = '', existingLastName = '';
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][4]).trim() === oldCommandNumber && String(data[i][5]).trim() === formattedOldDate) {
          foundRowIndex = i; existingRank = data[i][0]; existingFirstName = data[i][1]; existingLastName = data[i][2]; break;
        }
      }
      if (foundRowIndex === -1) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${oldCommandNumber} ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedOldDate}`);
      const existingOwnerMilitaryId = getMilitaryIdByPersonnelName(existingRank, existingFirstName, existingLastName);
      if (String(currentUserMilitaryId).trim() !== String(existingOwnerMilitaryId).trim()) return sendReply(userId, `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô`);
      let newValue = (fieldName === "‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà") ? (parseThaiDateToDateObject(newValueRaw) ? formatDateToThaiBuddhist(parseThaiDateToDateObject(newValueRaw)) : null) : newValueRaw;
      if (fieldName === "‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" && !newValue) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      commandSheet.getRange(foundRowIndex + 1, colIndex + 1).setValue(newValue);
      sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${oldCommandNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      clearCache('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    } else if (parts.length === 9) { // Full Update
      const [oldCommandNumber, oldDateStr, newRank, newFirstName, newLastName, newCommandList, newCommandNumber, newDateStr, newFileLink] = parts.map(p => p.trim());
      const formattedOldDate = parseThaiDateToDateObject(oldDateStr) ? formatDateToThaiBuddhist(parseThaiDateToDateObject(oldDateStr)) : null;
      const formattedNewDate = parseThaiDateToDateObject(newDateStr) ? formatDateToThaiBuddhist(parseThaiDateToDateObject(newDateStr)) : null;
      if (!formattedOldDate || !formattedNewDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      let foundRowIndex = -1, existingRank = '', existingFirstName = '', existingLastName = '';
      for (let i = 1; i < data.length; i++) {
        if (String(data[i][4]).trim() === oldCommandNumber && String(data[i][5]).trim() === formattedOldDate) {
          foundRowIndex = i; existingRank = data[i][0]; existingFirstName = data[i][1]; existingLastName = data[i][2]; break;
        }
      }
      if (foundRowIndex === -1) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${oldCommandNumber} ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedOldDate}`);
      const existingOwnerMilitaryId = getMilitaryIdByPersonnelName(existingRank, existingFirstName, existingLastName);
      if (String(currentUserMilitaryId).trim() !== String(existingOwnerMilitaryId).trim()) return sendReply(userId, `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô`);
      const newOwnerMilitaryId = getMilitaryIdByPersonnelName(newRank, newFirstName, newLastName);
      if (!newOwnerMilitaryId || String(currentUserMilitaryId).trim() !== String(newOwnerMilitaryId).trim()) return sendReply(userId, `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ`);
      const newData = [newRank, newFirstName, newLastName, newCommandList, newCommandNumber, formattedNewDate, newFileLink];
      commandSheet.getRange(foundRowIndex + 1, 1, 1, newData.length).setValues([newData]);
      sendReply(userId, `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${oldCommandNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
      clearCache('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    } else {
      sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà>|<‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå>|<‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà>
üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°>|<‡∏¢‡∏®‡πÉ‡∏´‡∏°‡πà>|...`);
    }
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleEditCommand: ${e.message}`);
  }
}

function handleDeleteCommand(userId, text) {
  try {
    if (!checkAdminPermission(userId)) return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á');
    const parts = text.replace('/‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ', '').split('|');
    if (parts.length !== 2) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(‡∏û.‡∏®.)>');
    const [commandNumber, dateStr] = parts.map(p => p.trim());
    const commandDate = parseThaiDateToDateObject(dateStr);
    if (!commandDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    const formattedDate = formatDateToThaiBuddhist(commandDate);
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const data = commandSheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][4]).trim() === commandNumber && String(data[i][5]).trim() === formattedDate) {
        commandSheet.deleteRow(i + 1);
        sendReply(userId, `‚úÖ ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${commandNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        clearCache('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
        return;
      }
    }
    sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${commandNumber} ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate}`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleDeleteCommand: ${e.message}`);
  }
}

function handleSearchCommand(userId, text) {
  try {
    const keyword = text.replace('/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ', '').trim().toLowerCase();
    if (!keyword) return sendReply(userId, '‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const allCommands = getSpreadsheetData('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ').slice(1);
    const matchingCommands = allCommands.filter(row => {
      const searchableText = `${row[0]} ${row[1]} ${row[2]} ${row[3]} ${row[4]}`.toLowerCase();
      return searchableText.includes(keyword);
    });
    if (matchingCommands.length === 0) return sendReply(userId, `üì≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î "${keyword}"`);
    sendReply(userId, `üìú ‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ${matchingCommands.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "${keyword}"`);
    matchingCommands.slice(0, 10).forEach(row => sendFlexCommandInfo(userId, row[0], row[1], row[2], row[3], row[4], row[5], row[6]));
    if (matchingCommands.length > 10) sendReply(userId, `...‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏µ‡∏Å ${matchingCommands.length - 10} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleSearchCommand: ${e.message}`);
  }
}

function handleViewAllCommands(userId) {
  try {
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const allCommands = getSpreadsheetData('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ').slice(1);
    if (allCommands.length === 0) return sendReply(userId, 'üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    sendReply(userId, `üìú ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    allCommands.slice(0, 10).reverse().forEach(row => sendFlexCommandInfo(userId, row[0], row[1], row[2], row[3], row[4], row[5], row[6]));
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleViewAllCommands: ${e.message}`);
  }
}

function sendFlexCommandInfo(userId, rank, firstName, lastName, commandList, commandNumber, date, fileLink) {
  function getPreviewDriveLink(fileLink) {
    if (!fileLink) return '';
    const match = fileLink.match(/\/d\/([a-zA-Z0-9_-]+)/);
    if (match && match[1]) return `https://drive.google.com/file/d/${match[1]}/preview`;
    return fileLink;
  }
  const previewLink = getPreviewDriveLink(fileLink);
  const flexContents = {
    type: "bubble", size: "giga",
    header: { type: "box", layout: "vertical", contents: [{ type: "text", text: "üìú ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", weight: "bold", color: "#ffffff", size: "lg", align: "center" }], backgroundColor: "#4CAF50", paddingAll: "md" },
    body: {
      type: "box", layout: "vertical", spacing: "sm", paddingAll: "xl", contents: [
        { type: "text", text: `${rank} ${firstName} ${lastName}`, weight: "bold", size: "md", wrap: true, color: "#333333" },
        { type: "separator", margin: "md", color: "#eeeeee" },
        createKeyValueBox("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", commandList),
        createKeyValueBox("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà", commandNumber),
        createKeyValueBox("‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", date)
      ]
    },
    footer: { type: "box", layout: "vertical", spacing: "sm", contents: previewLink ? [{ type: "button", style: "primary", height: "sm", action: { type: "uri", label: "üîó ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", uri: previewLink } }] : [{ type: "text", text: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", size: "sm", color: "#999999", align: "center" }] }
  };
  sendFlex(userId, flexContents);
}

function handleIncomingFileOrImage(userId, messageId, messageType, fileName, contentProvider) {
  try {
    CacheService.getUserCache().put(userId + '_lastMessageId', messageId, 300);
    CacheService.getUserCache().put(userId + '_lastMessageType', messageType, 300);
    CacheService.getUserCache().put(userId + '_lastFileName', fileName || 'unknown_file', 300);
    sendReply(userId, `‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${messageType === 'image' ? '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' : '‡πÑ‡∏ü‡∏•‡πå'} ‡πÅ‡∏•‡πâ‡∏ß!
‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á:
üñºÔ∏è ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: /‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå <‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£>
üìú ‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(‡∏û.‡∏®.)>`);
  } catch (e) {
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    Logger.log(`Error in handleIncomingFileOrImage: ${e.message}`);
  }
}

function fetchFileFromLine(messageId) {
  const url = `https://api-data.line.me/v2/bot/message/${messageId}/content`;
  const options = { headers: { 'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN }, method: 'get', muteHttpExceptions: true };
  const response = UrlFetchApp.fetch(url, options);
  if (response.getResponseCode() === 200) return response.getBlob();
  const errorBody = response.getContentText();
  Logger.log(`Error fetching file from Line: ${response.getResponseCode()} - ${errorBody}`);
  throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å LINE ‡πÑ‡∏î‡πâ: ‡∏£‡∏´‡∏±‡∏™ ${response.getResponseCode()}`);
}

function uploadFileToDrive(fileName, blob, folderName) {
  try {
    if (!blob || !blob.getBytes || blob.getBytes().length === 0) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• blob");
    const parentFolder = getOrCreateDriveFolder(folderName);
    const file = parentFolder.createFile(blob.setName(fileName));
    if (!file) throw new Error("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    const fileId = file.getId();
    return { fileUrl: file.getUrl(), imageUrl: `https://drive.google.com/uc?export=view&id=${fileId}` };
  } catch (e) {
    Logger.log(`Error uploading file to Drive: ${e.message}`);
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏∂‡πâ‡∏ô Google Drive ‡πÑ‡∏î‡πâ: ${e.message}`);
  }
}

function getOrCreateDriveFolder(folderName) {
  const folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) return folders.next();
  return DriveApp.createFolder(folderName);
}

function handleSetProfilePicture(userId, text) {
  try {
    const currentUserMilitaryId = getUserMilitaryId(userId);
    if (!currentUserMilitaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const targetMilitaryId = text.replace('/‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ', '').trim();
    if (!targetMilitaryId) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå <‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏´‡∏≤‡∏£>');
    if (String(currentUserMilitaryId).trim() !== String(targetMilitaryId).trim() && !checkAdminPermission(userId)) {
      return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô');
    }
    const lastMessageId = CacheService.getUserCache().get(userId + '_lastMessageId');
    const lastMessageType = CacheService.getUserCache().get(userId + '_lastMessageType');
    const lastFileName = CacheService.getUserCache().get(userId + '_lastFileName');
    if (!lastMessageId || lastMessageType !== 'image') return sendReply(userId, '‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô');
    const personnelSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
    if (!personnelSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•"');
    const data = personnelSheet.getDataRange().getValues();
    let foundRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][5]).trim() === String(targetMilitaryId).trim()) {
        foundRowIndex = i;
        break;
      }
    }
    if (foundRowIndex === -1) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${targetMilitaryId}"`);
    sendReply(userId, '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
    const imageBlob = fetchFileFromLine(lastMessageId);
    const result = uploadFileToDrive(`profile_${targetMilitaryId}`, imageBlob, PROFILE_PICTURE_FOLDER_NAME);
    personnelSheet.getRange(foundRowIndex + 1, 18).setValue(result.fileUrl);
    personnelSheet.getRange(foundRowIndex + 1, 19).setFormula(`=IMAGE("${result.imageUrl}")`);
    CacheService.getUserCache().removeAll([userId + '_lastMessageId', userId + '_lastMessageType', userId + '_lastFileName']);
    sendReply(userId, `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏´‡∏≤‡∏£ "${targetMilitaryId}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    clearCache('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•');
  } catch (e) {
    Logger.log(`Error in handleSetProfilePicture: ${e.message}`);
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ${e.message}`);
  }
}

function handleLinkCommandFile(userId, text) {
  try {
    const currentUserMilitaryId = getUserMilitaryId(userId);
    if (!currentUserMilitaryId) return sendReply(userId, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    const parts = text.replace('/‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ', '').split('|');
    if (parts.length !== 2) return sendReply(userId, `‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: /‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á <‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà>|<‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà(‡∏û.‡∏®.)>`);
    const [commandNumber, dateStr] = parts.map(p => p.trim());
    const commandDate = parseThaiDateToDateObject(dateStr);
    if (!commandDate) return sendReply(userId, '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    const formattedDate = formatDateToThaiBuddhist(commandDate);
    const lastMessageId = CacheService.getUserCache().get(userId + '_lastMessageId');
    const lastMessageType = CacheService.getUserCache().get(userId + '_lastMessageType');
    const lastFileName = CacheService.getUserCache().get(userId + '_lastFileName');
    if (!lastMessageId || (lastMessageType !== 'image' && lastMessageType !== 'file')) return sendReply(userId, '‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û) ‡∏Å‡πà‡∏≠‡∏ô');
    const commandSheet = SpreadsheetApp.getActive().getSheetByName('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
    if (!commandSheet) return sendReply(userId, '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"');
    const data = commandSheet.getDataRange().getValues();
    let foundRowIndex = -1, existingRank = '', existingFirstName = '', existingLastName = '';
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][4]).trim() === commandNumber && String(data[i][5]).trim() === formattedDate) {
        foundRowIndex = i; existingRank = data[i][0]; existingFirstName = data[i][1]; existingLastName = data[i][2]; break;
      }
    }
    if (foundRowIndex === -1) return sendReply(userId, `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${commandNumber}`);
    const commandOwnerMilitaryId = getMilitaryIdByPersonnelName(existingRank, existingFirstName, existingLastName);
    if ((!commandOwnerMilitaryId || String(currentUserMilitaryId).trim() !== String(commandOwnerMilitaryId).trim()) && !checkAdminPermission(userId)) {
      return sendReply(userId, '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô');
    }
    sendReply(userId, '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...');
    const fileBlob = fetchFileFromLine(lastMessageId);
    const uploadFileName = `${commandNumber.replace(/\//g, '_')}_${formattedDate.replace(/\//g, '-')}_${lastFileName || 'command_file'}`;
    const uploadedResult = uploadFileToDrive(uploadFileName, fileBlob, COMMAND_FILES_FOLDER_NAME);
    commandSheet.getRange(foundRowIndex + 1, 7).setValue(uploadedResult.fileUrl);
    CacheService.getUserCache().removeAll([userId + '_lastMessageId', userId + '_lastMessageType', userId + '_lastFileName']);
    sendReply(userId, `‚úÖ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${commandNumber} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    clearCache('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ');
  } catch (e) {
    Logger.log(`Error in handleLinkCommandFile: ${e.message}`);
    sendReply(userId, `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå: ${e.message}`);
  }
}
